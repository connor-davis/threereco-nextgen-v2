// This file is auto-generated by @hey-api/openapi-ts
import {
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiMaterialsById,
  deleteApiNotificationsById,
  deleteApiOrganizationsById,
  deleteApiOrganizationsUsersById,
  deleteApiProductsById,
  deleteApiRolesById,
  deleteApiTransactionsById,
  deleteApiUsersById,
  getApiAuditlogs,
  getApiAuditlogsById,
  getApiAuthenticationCheck,
  getApiAuthenticationMfaEnable,
  getApiAuthenticationOrganizations,
  getApiAuthenticationPermissions,
  getApiCollections,
  getApiMaterials,
  getApiMaterialsById,
  getApiNotifications,
  getApiNotificationsById,
  getApiOrganizations,
  getApiOrganizationsById,
  getApiProducts,
  getApiProductsById,
  getApiRoles,
  getApiRolesAvailablePermissions,
  getApiRolesById,
  getApiTransactions,
  getApiTransactionsById,
  getApiUsers,
  getApiUsersById,
  postApiAuthenticationLogin,
  postApiAuthenticationLogout,
  postApiAuthenticationMfaVerify,
  postApiAuthenticationSignUp,
  postApiMaterials,
  postApiNotifications,
  postApiOrganizations,
  postApiOrganizationsByIdInvitesAccept,
  postApiOrganizationsInvitesSendByEmail,
  postApiProducts,
  postApiRoles,
  postApiTransactions,
  postApiUsers,
  putApiMaterialsById,
  putApiNotificationsById,
  putApiOrganizationsById,
  putApiProductsById,
  putApiRolesById,
  putApiTransactionsById,
  putApiUsersById,
} from '../sdk.gen';
import type {
  DeleteApiMaterialsByIdData,
  DeleteApiMaterialsByIdError,
  DeleteApiNotificationsByIdData,
  DeleteApiNotificationsByIdError,
  DeleteApiOrganizationsByIdData,
  DeleteApiOrganizationsByIdError,
  DeleteApiOrganizationsUsersByIdData,
  DeleteApiOrganizationsUsersByIdError,
  DeleteApiProductsByIdData,
  DeleteApiProductsByIdError,
  DeleteApiRolesByIdData,
  DeleteApiRolesByIdError,
  DeleteApiTransactionsByIdData,
  DeleteApiTransactionsByIdError,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdError,
  GetApiAuditlogsByIdData,
  GetApiAuditlogsData,
  GetApiAuditlogsError,
  GetApiAuditlogsResponse,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationMfaEnableData,
  GetApiAuthenticationOrganizationsData,
  GetApiAuthenticationPermissionsData,
  GetApiCollectionsData,
  GetApiCollectionsError,
  GetApiCollectionsResponse,
  GetApiMaterialsByIdData,
  GetApiMaterialsData,
  GetApiMaterialsError,
  GetApiMaterialsResponse,
  GetApiNotificationsByIdData,
  GetApiNotificationsData,
  GetApiNotificationsError,
  GetApiNotificationsResponse,
  GetApiOrganizationsByIdData,
  GetApiOrganizationsData,
  GetApiOrganizationsError,
  GetApiOrganizationsResponse,
  GetApiProductsByIdData,
  GetApiProductsData,
  GetApiProductsError,
  GetApiProductsResponse,
  GetApiRolesAvailablePermissionsData,
  GetApiRolesByIdData,
  GetApiRolesData,
  GetApiRolesError,
  GetApiRolesResponse,
  GetApiTransactionsByIdData,
  GetApiTransactionsData,
  GetApiTransactionsError,
  GetApiTransactionsResponse,
  GetApiUsersByIdData,
  GetApiUsersData,
  GetApiUsersError,
  GetApiUsersResponse,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutError,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiAuthenticationSignUpData,
  PostApiAuthenticationSignUpError,
  PostApiMaterialsData,
  PostApiMaterialsError,
  PostApiNotificationsData,
  PostApiNotificationsError,
  PostApiOrganizationsByIdInvitesAcceptData,
  PostApiOrganizationsByIdInvitesAcceptError,
  PostApiOrganizationsData,
  PostApiOrganizationsError,
  PostApiOrganizationsInvitesSendByEmailData,
  PostApiOrganizationsInvitesSendByEmailError,
  PostApiProductsData,
  PostApiProductsError,
  PostApiRolesData,
  PostApiRolesError,
  PostApiTransactionsData,
  PostApiTransactionsError,
  PostApiUsersData,
  PostApiUsersError,
  PutApiMaterialsByIdData,
  PutApiMaterialsByIdError,
  PutApiNotificationsByIdData,
  PutApiNotificationsByIdError,
  PutApiOrganizationsByIdData,
  PutApiOrganizationsByIdError,
  PutApiProductsByIdData,
  PutApiProductsByIdError,
  PutApiRolesByIdData,
  PutApiRolesByIdError,
  PutApiTransactionsByIdData,
  PutApiTransactionsByIdError,
  PutApiUsersByIdData,
  PutApiUsersByIdError,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAuditlogsQueryKey = (
  options?: Options<GetApiAuditlogsData>
) => createQueryKey('getApiAuditlogs', options);

/**
 * View AuditLogs
 * Endpoint to retrieve a list of auditlogs with pagination and optional search query
 */
export const getApiAuditlogsOptions = (
  options?: Options<GetApiAuditlogsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuditlogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuditlogsQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getApiAuditlogsInfiniteQueryKey = (
  options?: Options<GetApiAuditlogsData>
): QueryKey<Options<GetApiAuditlogsData>> =>
  createQueryKey('getApiAuditlogs', options, true);

/**
 * View AuditLogs
 * Endpoint to retrieve a list of auditlogs with pagination and optional search query
 */
export const getApiAuditlogsInfiniteOptions = (
  options?: Options<GetApiAuditlogsData>
) => {
  return infiniteQueryOptions<
    GetApiAuditlogsResponse,
    GetApiAuditlogsError,
    InfiniteData<GetApiAuditlogsResponse>,
    QueryKey<Options<GetApiAuditlogsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiAuditlogsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiAuditlogsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiAuditlogs({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiAuditlogsInfiniteQueryKey(options),
    }
  );
};

export const getApiAuditlogsByIdQueryKey = (
  options: Options<GetApiAuditlogsByIdData>
) => createQueryKey('getApiAuditlogsById', options);

/**
 * View AuditLog
 * Endpoint to retrieve a auditlog by their ID
 */
export const getApiAuditlogsByIdOptions = (
  options: Options<GetApiAuditlogsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuditlogsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuditlogsByIdQueryKey(options),
  });
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginOptions = (
  options: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationLogoutQueryKey = (
  options?: Options<PostApiAuthenticationLogoutData>
) => createQueryKey('postApiAuthenticationLogout', options);

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutOptions = (
  options?: Options<PostApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLogoutQueryKey(options),
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutMutation = (
  options?: Partial<Options<PostApiAuthenticationLogoutData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLogoutError,
  Options<PostApiAuthenticationLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLogoutError,
    Options<PostApiAuthenticationLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationOrganizationsQueryKey = (
  options?: Options<GetApiAuthenticationOrganizationsData>
) => createQueryKey('getApiAuthenticationOrganizations', options);

/**
 * Organizations
 * Return the user's organizations.
 */
export const getApiAuthenticationOrganizationsOptions = (
  options?: Options<GetApiAuthenticationOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationOrganizationsQueryKey(options),
  });
};

export const getApiAuthenticationPermissionsQueryKey = (
  options?: Options<GetApiAuthenticationPermissionsData>
) => createQueryKey('getApiAuthenticationPermissions', options);

/**
 * Permissions
 * Return the user's permissions.
 */
export const getApiAuthenticationPermissionsOptions = (
  options?: Options<GetApiAuthenticationPermissionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationPermissions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationPermissionsQueryKey(options),
  });
};

export const postApiAuthenticationSignUpQueryKey = (
  options: Options<PostApiAuthenticationSignUpData>
) => createQueryKey('postApiAuthenticationSignUp', options);

/**
 * Sign Up
 * Signs up a new user with email and password.
 */
export const postApiAuthenticationSignUpOptions = (
  options: Options<PostApiAuthenticationSignUpData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationSignUp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationSignUpQueryKey(options),
  });
};

/**
 * Sign Up
 * Signs up a new user with email and password.
 */
export const postApiAuthenticationSignUpMutation = (
  options?: Partial<Options<PostApiAuthenticationSignUpData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationSignUpError,
  Options<PostApiAuthenticationSignUpData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationSignUpError,
    Options<PostApiAuthenticationSignUpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationSignUp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsQueryKey = (
  options?: Options<GetApiCollectionsData>
) => createQueryKey('getApiCollections', options);

/**
 * View Collections
 * Endpoint to retrieve a list of collections with pagination and optional search query
 */
export const getApiCollectionsOptions = (
  options?: Options<GetApiCollectionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsQueryKey(options),
  });
};

export const getApiCollectionsInfiniteQueryKey = (
  options?: Options<GetApiCollectionsData>
): QueryKey<Options<GetApiCollectionsData>> =>
  createQueryKey('getApiCollections', options, true);

/**
 * View Collections
 * Endpoint to retrieve a list of collections with pagination and optional search query
 */
export const getApiCollectionsInfiniteOptions = (
  options?: Options<GetApiCollectionsData>
) => {
  return infiniteQueryOptions<
    GetApiCollectionsResponse,
    GetApiCollectionsError,
    InfiniteData<GetApiCollectionsResponse>,
    QueryKey<Options<GetApiCollectionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiCollectionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiCollectionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiCollections({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiCollectionsInfiniteQueryKey(options),
    }
  );
};

export const getApiMaterialsQueryKey = (
  options?: Options<GetApiMaterialsData>
) => createQueryKey('getApiMaterials', options);

/**
 * View Materials
 * Endpoint to retrieve a list of materials with pagination and optional search query
 */
export const getApiMaterialsOptions = (
  options?: Options<GetApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsQueryKey(options),
  });
};

export const getApiMaterialsInfiniteQueryKey = (
  options?: Options<GetApiMaterialsData>
): QueryKey<Options<GetApiMaterialsData>> =>
  createQueryKey('getApiMaterials', options, true);

/**
 * View Materials
 * Endpoint to retrieve a list of materials with pagination and optional search query
 */
export const getApiMaterialsInfiniteOptions = (
  options?: Options<GetApiMaterialsData>
) => {
  return infiniteQueryOptions<
    GetApiMaterialsResponse,
    GetApiMaterialsError,
    InfiniteData<GetApiMaterialsResponse>,
    QueryKey<Options<GetApiMaterialsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiMaterialsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiMaterialsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiMaterials({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiMaterialsInfiniteQueryKey(options),
    }
  );
};

export const postApiMaterialsQueryKey = (
  options: Options<PostApiMaterialsData>
) => createQueryKey('postApiMaterials', options);

/**
 * Create Material
 * Creates a new material.
 */
export const postApiMaterialsOptions = (
  options: Options<PostApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiMaterialsQueryKey(options),
  });
};

/**
 * Create Material
 * Creates a new material.
 */
export const postApiMaterialsMutation = (
  options?: Partial<Options<PostApiMaterialsData>>
): UseMutationOptions<
  unknown,
  PostApiMaterialsError,
  Options<PostApiMaterialsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiMaterialsError,
    Options<PostApiMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Material by ID
 * Deletes a material by by their id.
 */
export const deleteApiMaterialsByIdMutation = (
  options?: Partial<Options<DeleteApiMaterialsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiMaterialsByIdError,
  Options<DeleteApiMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiMaterialsByIdError,
    Options<DeleteApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsByIdQueryKey = (
  options: Options<GetApiMaterialsByIdData>
) => createQueryKey('getApiMaterialsById', options);

/**
 * View Material
 * Endpoint to retrieve a material by their ID
 */
export const getApiMaterialsByIdOptions = (
  options: Options<GetApiMaterialsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterialsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsByIdQueryKey(options),
  });
};

/**
 * Update Material by ID
 * Updates the material information for a specific material identified by their id.
 */
export const putApiMaterialsByIdMutation = (
  options?: Partial<Options<PutApiMaterialsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiMaterialsByIdError,
  Options<PutApiMaterialsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiMaterialsByIdError,
    Options<PutApiMaterialsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiMaterialsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiNotificationsQueryKey = (
  options?: Options<GetApiNotificationsData>
) => createQueryKey('getApiNotifications', options);

/**
 * View Notifications
 * Endpoint to retrieve a list of notifications with pagination and optional search query
 */
export const getApiNotificationsOptions = (
  options?: Options<GetApiNotificationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiNotifications({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiNotificationsQueryKey(options),
  });
};

export const getApiNotificationsInfiniteQueryKey = (
  options?: Options<GetApiNotificationsData>
): QueryKey<Options<GetApiNotificationsData>> =>
  createQueryKey('getApiNotifications', options, true);

/**
 * View Notifications
 * Endpoint to retrieve a list of notifications with pagination and optional search query
 */
export const getApiNotificationsInfiniteOptions = (
  options?: Options<GetApiNotificationsData>
) => {
  return infiniteQueryOptions<
    GetApiNotificationsResponse,
    GetApiNotificationsError,
    InfiniteData<GetApiNotificationsResponse>,
    QueryKey<Options<GetApiNotificationsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiNotificationsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiNotificationsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiNotifications({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiNotificationsInfiniteQueryKey(options),
    }
  );
};

export const postApiNotificationsQueryKey = (
  options: Options<PostApiNotificationsData>
) => createQueryKey('postApiNotifications', options);

/**
 * Create Notification
 * Creates a new notification.
 */
export const postApiNotificationsOptions = (
  options: Options<PostApiNotificationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiNotifications({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiNotificationsQueryKey(options),
  });
};

/**
 * Create Notification
 * Creates a new notification.
 */
export const postApiNotificationsMutation = (
  options?: Partial<Options<PostApiNotificationsData>>
): UseMutationOptions<
  unknown,
  PostApiNotificationsError,
  Options<PostApiNotificationsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiNotificationsError,
    Options<PostApiNotificationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiNotifications({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Notification by ID
 * Deletes a notification by by their id.
 */
export const deleteApiNotificationsByIdMutation = (
  options?: Partial<Options<DeleteApiNotificationsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiNotificationsByIdError,
  Options<DeleteApiNotificationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiNotificationsByIdError,
    Options<DeleteApiNotificationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiNotificationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiNotificationsByIdQueryKey = (
  options: Options<GetApiNotificationsByIdData>
) => createQueryKey('getApiNotificationsById', options);

/**
 * View Notification
 * Endpoint to retrieve a notification by their ID
 */
export const getApiNotificationsByIdOptions = (
  options: Options<GetApiNotificationsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiNotificationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiNotificationsByIdQueryKey(options),
  });
};

/**
 * Update Notification by ID
 * Updates the notification information for a specific notification identified by their id.
 */
export const putApiNotificationsByIdMutation = (
  options?: Partial<Options<PutApiNotificationsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiNotificationsByIdError,
  Options<PutApiNotificationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiNotificationsByIdError,
    Options<PutApiNotificationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiNotificationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsQueryKey = (
  options?: Options<GetApiOrganizationsData>
) => createQueryKey('getApiOrganizations', options);

/**
 * View Organizations
 * Endpoint to retrieve a list of organizations with pagination and optional search query
 */
export const getApiOrganizationsOptions = (
  options?: Options<GetApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsQueryKey(options),
  });
};

export const getApiOrganizationsInfiniteQueryKey = (
  options?: Options<GetApiOrganizationsData>
): QueryKey<Options<GetApiOrganizationsData>> =>
  createQueryKey('getApiOrganizations', options, true);

/**
 * View Organizations
 * Endpoint to retrieve a list of organizations with pagination and optional search query
 */
export const getApiOrganizationsInfiniteOptions = (
  options?: Options<GetApiOrganizationsData>
) => {
  return infiniteQueryOptions<
    GetApiOrganizationsResponse,
    GetApiOrganizationsError,
    InfiniteData<GetApiOrganizationsResponse>,
    QueryKey<Options<GetApiOrganizationsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiOrganizationsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiOrganizationsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiOrganizations({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiOrganizationsInfiniteQueryKey(options),
    }
  );
};

export const postApiOrganizationsQueryKey = (
  options: Options<PostApiOrganizationsData>
) => createQueryKey('postApiOrganizations', options);

/**
 * Create Organization
 * Creates a new organization.
 */
export const postApiOrganizationsOptions = (
  options: Options<PostApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiOrganizationsQueryKey(options),
  });
};

/**
 * Create Organization
 * Creates a new organization.
 */
export const postApiOrganizationsMutation = (
  options?: Partial<Options<PostApiOrganizationsData>>
): UseMutationOptions<
  unknown,
  PostApiOrganizationsError,
  Options<PostApiOrganizationsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiOrganizationsError,
    Options<PostApiOrganizationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiOrganizationsInvitesSendByEmailQueryKey = (
  options: Options<PostApiOrganizationsInvitesSendByEmailData>
) => createQueryKey('postApiOrganizationsInvitesSendByEmail', options);

/**
 * Send Organization Invite
 * Sends an invitation to join the organization.
 */
export const postApiOrganizationsInvitesSendByEmailOptions = (
  options: Options<PostApiOrganizationsInvitesSendByEmailData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiOrganizationsInvitesSendByEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiOrganizationsInvitesSendByEmailQueryKey(options),
  });
};

/**
 * Send Organization Invite
 * Sends an invitation to join the organization.
 */
export const postApiOrganizationsInvitesSendByEmailMutation = (
  options?: Partial<Options<PostApiOrganizationsInvitesSendByEmailData>>
): UseMutationOptions<
  unknown,
  PostApiOrganizationsInvitesSendByEmailError,
  Options<PostApiOrganizationsInvitesSendByEmailData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiOrganizationsInvitesSendByEmailError,
    Options<PostApiOrganizationsInvitesSendByEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiOrganizationsInvitesSendByEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Remove User by ID
 * Removes a user by their id.
 */
export const deleteApiOrganizationsUsersByIdMutation = (
  options?: Partial<Options<DeleteApiOrganizationsUsersByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiOrganizationsUsersByIdError,
  Options<DeleteApiOrganizationsUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiOrganizationsUsersByIdError,
    Options<DeleteApiOrganizationsUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiOrganizationsUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Organization by ID
 * Deletes a organization by by their id.
 */
export const deleteApiOrganizationsByIdMutation = (
  options?: Partial<Options<DeleteApiOrganizationsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiOrganizationsByIdError,
  Options<DeleteApiOrganizationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiOrganizationsByIdError,
    Options<DeleteApiOrganizationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiOrganizationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsByIdQueryKey = (
  options: Options<GetApiOrganizationsByIdData>
) => createQueryKey('getApiOrganizationsById', options);

/**
 * View Organization
 * Endpoint to retrieve a organization by their ID
 */
export const getApiOrganizationsByIdOptions = (
  options: Options<GetApiOrganizationsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsByIdQueryKey(options),
  });
};

/**
 * Update Organization by ID
 * Updates the organization information for a specific organization identified by their id.
 */
export const putApiOrganizationsByIdMutation = (
  options?: Partial<Options<PutApiOrganizationsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiOrganizationsByIdError,
  Options<PutApiOrganizationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiOrganizationsByIdError,
    Options<PutApiOrganizationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiOrganizationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiOrganizationsByIdInvitesAcceptQueryKey = (
  options?: Options<PostApiOrganizationsByIdInvitesAcceptData>
) => createQueryKey('postApiOrganizationsByIdInvitesAccept', options);

/**
 * Accept Organization Invite
 * Accepts an invitation to join the organization.
 */
export const postApiOrganizationsByIdInvitesAcceptOptions = (
  options?: Options<PostApiOrganizationsByIdInvitesAcceptData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiOrganizationsByIdInvitesAccept({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiOrganizationsByIdInvitesAcceptQueryKey(options),
  });
};

/**
 * Accept Organization Invite
 * Accepts an invitation to join the organization.
 */
export const postApiOrganizationsByIdInvitesAcceptMutation = (
  options?: Partial<Options<PostApiOrganizationsByIdInvitesAcceptData>>
): UseMutationOptions<
  unknown,
  PostApiOrganizationsByIdInvitesAcceptError,
  Options<PostApiOrganizationsByIdInvitesAcceptData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiOrganizationsByIdInvitesAcceptError,
    Options<PostApiOrganizationsByIdInvitesAcceptData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiOrganizationsByIdInvitesAccept({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProductsQueryKey = (options?: Options<GetApiProductsData>) =>
  createQueryKey('getApiProducts', options);

/**
 * View Products
 * Endpoint to retrieve a list of products with pagination and optional search query
 */
export const getApiProductsOptions = (
  options?: Options<GetApiProductsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProductsQueryKey(options),
  });
};

export const getApiProductsInfiniteQueryKey = (
  options?: Options<GetApiProductsData>
): QueryKey<Options<GetApiProductsData>> =>
  createQueryKey('getApiProducts', options, true);

/**
 * View Products
 * Endpoint to retrieve a list of products with pagination and optional search query
 */
export const getApiProductsInfiniteOptions = (
  options?: Options<GetApiProductsData>
) => {
  return infiniteQueryOptions<
    GetApiProductsResponse,
    GetApiProductsError,
    InfiniteData<GetApiProductsResponse>,
    QueryKey<Options<GetApiProductsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiProductsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiProductsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiProducts({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiProductsInfiniteQueryKey(options),
    }
  );
};

export const postApiProductsQueryKey = (
  options: Options<PostApiProductsData>
) => createQueryKey('postApiProducts', options);

/**
 * Create Product
 * Creates a new product.
 */
export const postApiProductsOptions = (
  options: Options<PostApiProductsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiProductsQueryKey(options),
  });
};

/**
 * Create Product
 * Creates a new product.
 */
export const postApiProductsMutation = (
  options?: Partial<Options<PostApiProductsData>>
): UseMutationOptions<
  unknown,
  PostApiProductsError,
  Options<PostApiProductsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiProductsError,
    Options<PostApiProductsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiProducts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Product by ID
 * Deletes a product by by their id.
 */
export const deleteApiProductsByIdMutation = (
  options?: Partial<Options<DeleteApiProductsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiProductsByIdError,
  Options<DeleteApiProductsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiProductsByIdError,
    Options<DeleteApiProductsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiProductsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProductsByIdQueryKey = (
  options: Options<GetApiProductsByIdData>
) => createQueryKey('getApiProductsById', options);

/**
 * View Product
 * Endpoint to retrieve a product by their ID
 */
export const getApiProductsByIdOptions = (
  options: Options<GetApiProductsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProductsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProductsByIdQueryKey(options),
  });
};

/**
 * Update Product by ID
 * Updates the product information for a specific product identified by their id.
 */
export const putApiProductsByIdMutation = (
  options?: Partial<Options<PutApiProductsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiProductsByIdError,
  Options<PutApiProductsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiProductsByIdError,
    Options<PutApiProductsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiProductsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesQueryKey = (options?: Options<GetApiRolesData>) =>
  createQueryKey('getApiRoles', options);

/**
 * View Roles
 * Endpoint to retrieve a list of roles with pagination and optional search query
 */
export const getApiRolesOptions = (options?: Options<GetApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesQueryKey(options),
  });
};

export const getApiRolesInfiniteQueryKey = (
  options?: Options<GetApiRolesData>
): QueryKey<Options<GetApiRolesData>> =>
  createQueryKey('getApiRoles', options, true);

/**
 * View Roles
 * Endpoint to retrieve a list of roles with pagination and optional search query
 */
export const getApiRolesInfiniteOptions = (
  options?: Options<GetApiRolesData>
) => {
  return infiniteQueryOptions<
    GetApiRolesResponse,
    GetApiRolesError,
    InfiniteData<GetApiRolesResponse>,
    QueryKey<Options<GetApiRolesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiRolesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiRolesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiRoles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiRolesInfiniteQueryKey(options),
    }
  );
};

export const postApiRolesQueryKey = (options: Options<PostApiRolesData>) =>
  createQueryKey('postApiRoles', options);

/**
 * Create Role
 * Creates a new role.
 */
export const postApiRolesOptions = (options: Options<PostApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiRolesQueryKey(options),
  });
};

/**
 * Create Role
 * Creates a new role.
 */
export const postApiRolesMutation = (
  options?: Partial<Options<PostApiRolesData>>
): UseMutationOptions<
  unknown,
  PostApiRolesError,
  Options<PostApiRolesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiRolesError,
    Options<PostApiRolesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiRoles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesAvailablePermissionsQueryKey = (
  options?: Options<GetApiRolesAvailablePermissionsData>
) => createQueryKey('getApiRolesAvailablePermissions', options);

/**
 * Available Permissions
 * Return the available permissions for roles.
 */
export const getApiRolesAvailablePermissionsOptions = (
  options?: Options<GetApiRolesAvailablePermissionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRolesAvailablePermissions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesAvailablePermissionsQueryKey(options),
  });
};

/**
 * Delete Role by ID
 * Deletes a role by by their id.
 */
export const deleteApiRolesByIdMutation = (
  options?: Partial<Options<DeleteApiRolesByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiRolesByIdError,
  Options<DeleteApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiRolesByIdError,
    Options<DeleteApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesByIdQueryKey = (
  options: Options<GetApiRolesByIdData>
) => createQueryKey('getApiRolesById', options);

/**
 * View Role
 * Endpoint to retrieve a role by their ID
 */
export const getApiRolesByIdOptions = (
  options: Options<GetApiRolesByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRolesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesByIdQueryKey(options),
  });
};

/**
 * Update Role by ID
 * Updates the role information for a specific role identified by their id.
 */
export const putApiRolesByIdMutation = (
  options?: Partial<Options<PutApiRolesByIdData>>
): UseMutationOptions<
  unknown,
  PutApiRolesByIdError,
  Options<PutApiRolesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiRolesByIdError,
    Options<PutApiRolesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiRolesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsQueryKey = (
  options?: Options<GetApiTransactionsData>
) => createQueryKey('getApiTransactions', options);

/**
 * View Transactions
 * Endpoint to retrieve a list of transactions with pagination and optional search query
 */
export const getApiTransactionsOptions = (
  options?: Options<GetApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsQueryKey(options),
  });
};

export const getApiTransactionsInfiniteQueryKey = (
  options?: Options<GetApiTransactionsData>
): QueryKey<Options<GetApiTransactionsData>> =>
  createQueryKey('getApiTransactions', options, true);

/**
 * View Transactions
 * Endpoint to retrieve a list of transactions with pagination and optional search query
 */
export const getApiTransactionsInfiniteOptions = (
  options?: Options<GetApiTransactionsData>
) => {
  return infiniteQueryOptions<
    GetApiTransactionsResponse,
    GetApiTransactionsError,
    InfiniteData<GetApiTransactionsResponse>,
    QueryKey<Options<GetApiTransactionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiTransactionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiTransactionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiTransactions({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiTransactionsInfiniteQueryKey(options),
    }
  );
};

export const postApiTransactionsQueryKey = (
  options: Options<PostApiTransactionsData>
) => createQueryKey('postApiTransactions', options);

/**
 * Create Transaction
 * Creates a new transaction.
 */
export const postApiTransactionsOptions = (
  options: Options<PostApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTransactionsQueryKey(options),
  });
};

/**
 * Create Transaction
 * Creates a new transaction.
 */
export const postApiTransactionsMutation = (
  options?: Partial<Options<PostApiTransactionsData>>
): UseMutationOptions<
  unknown,
  PostApiTransactionsError,
  Options<PostApiTransactionsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiTransactionsError,
    Options<PostApiTransactionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTransactions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Transaction by ID
 * Deletes a transaction by by their id.
 */
export const deleteApiTransactionsByIdMutation = (
  options?: Partial<Options<DeleteApiTransactionsByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiTransactionsByIdError,
  Options<DeleteApiTransactionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiTransactionsByIdError,
    Options<DeleteApiTransactionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiTransactionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsByIdQueryKey = (
  options: Options<GetApiTransactionsByIdData>
) => createQueryKey('getApiTransactionsById', options);

/**
 * View Transaction
 * Endpoint to retrieve a transaction by their ID
 */
export const getApiTransactionsByIdOptions = (
  options: Options<GetApiTransactionsByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsByIdQueryKey(options),
  });
};

/**
 * Update Transaction by ID
 * Updates the transaction information for a specific transaction identified by their id.
 */
export const putApiTransactionsByIdMutation = (
  options?: Partial<Options<PutApiTransactionsByIdData>>
): UseMutationOptions<
  unknown,
  PutApiTransactionsByIdError,
  Options<PutApiTransactionsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiTransactionsByIdError,
    Options<PutApiTransactionsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiTransactionsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersQueryKey = (options?: Options<GetApiUsersData>) =>
  createQueryKey('getApiUsers', options);

/**
 * View Users
 * Endpoint to retrieve a list of users with pagination and optional search query
 */
export const getApiUsersOptions = (options?: Options<GetApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersQueryKey(options),
  });
};

export const getApiUsersInfiniteQueryKey = (
  options?: Options<GetApiUsersData>
): QueryKey<Options<GetApiUsersData>> =>
  createQueryKey('getApiUsers', options, true);

/**
 * View Users
 * Endpoint to retrieve a list of users with pagination and optional search query
 */
export const getApiUsersInfiniteOptions = (
  options?: Options<GetApiUsersData>
) => {
  return infiniteQueryOptions<
    GetApiUsersResponse,
    GetApiUsersError,
    InfiniteData<GetApiUsersResponse>,
    QueryKey<Options<GetApiUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersQueryKey = (options: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersOptions = (options: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * Creates a new user.
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  unknown,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User by ID
 * Deletes a user by by their id.
 */
export const deleteApiUsersByIdMutation = (
  options?: Partial<Options<DeleteApiUsersByIdData>>
): UseMutationOptions<
  unknown,
  DeleteApiUsersByIdError,
  Options<DeleteApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteApiUsersByIdError,
    Options<DeleteApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersByIdQueryKey = (
  options: Options<GetApiUsersByIdData>
) => createQueryKey('getApiUsersById', options);

/**
 * View User
 * Endpoint to retrieve a user by their ID
 */
export const getApiUsersByIdOptions = (
  options: Options<GetApiUsersByIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersByIdQueryKey(options),
  });
};

/**
 * Update User by ID
 * Updates the user information for a specific user identified by their id.
 */
export const putApiUsersByIdMutation = (
  options?: Partial<Options<PutApiUsersByIdData>>
): UseMutationOptions<
  unknown,
  PutApiUsersByIdError,
  Options<PutApiUsersByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PutApiUsersByIdError,
    Options<PutApiUsersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiUsersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
