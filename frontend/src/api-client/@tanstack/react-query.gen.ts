// This file is auto-generated by @hey-api/openapi-ts
import {
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  type Options,
  deleteApiAddressesId,
  deleteApiBankDetailsId,
  deleteApiCollectionsId,
  deleteApiMaterialsId,
  deleteApiOrganizationsId,
  deleteApiRolesId,
  deleteApiTransactionsId,
  deleteApiUsersId,
  getApiAddresses,
  getApiAddressesId,
  getApiAuthenticationCheck,
  getApiAuthenticationMfaEnable,
  getApiBankDetails,
  getApiBankDetailsId,
  getApiCollections,
  getApiCollectionsId,
  getApiMaterials,
  getApiMaterialsId,
  getApiOrganizations,
  getApiOrganizationsId,
  getApiRoles,
  getApiRolesId,
  getApiTransactions,
  getApiTransactionsId,
  getApiUsers,
  getApiUsersId,
  patchApiAddressesId,
  patchApiBankDetailsId,
  patchApiCollectionsId,
  patchApiMaterialsId,
  patchApiOrganizationsId,
  patchApiRolesId,
  patchApiTransactionsId,
  patchApiUsersId,
  postApiAddresses,
  postApiAuthenticationLogin,
  postApiAuthenticationLogout,
  postApiAuthenticationMfaVerify,
  postApiBankDetails,
  postApiCollections,
  postApiMaterials,
  postApiOrganizations,
  postApiRoles,
  postApiTransactions,
  postApiUsers,
} from '../sdk.gen';
import type {
  DeleteApiAddressesIdData,
  DeleteApiAddressesIdError,
  DeleteApiAddressesIdResponse,
  DeleteApiBankDetailsIdData,
  DeleteApiBankDetailsIdError,
  DeleteApiBankDetailsIdResponse,
  DeleteApiCollectionsIdData,
  DeleteApiCollectionsIdError,
  DeleteApiCollectionsIdResponse,
  DeleteApiMaterialsIdData,
  DeleteApiMaterialsIdError,
  DeleteApiMaterialsIdResponse,
  DeleteApiOrganizationsIdData,
  DeleteApiOrganizationsIdError,
  DeleteApiOrganizationsIdResponse,
  DeleteApiRolesIdData,
  DeleteApiRolesIdError,
  DeleteApiRolesIdResponse,
  DeleteApiTransactionsIdData,
  DeleteApiTransactionsIdError,
  DeleteApiTransactionsIdResponse,
  DeleteApiUsersIdData,
  DeleteApiUsersIdError,
  DeleteApiUsersIdResponse,
  GetApiAddressesData,
  GetApiAddressesError,
  GetApiAddressesIdData,
  GetApiAddressesResponse,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationMfaEnableData,
  GetApiBankDetailsData,
  GetApiBankDetailsError,
  GetApiBankDetailsIdData,
  GetApiBankDetailsResponse,
  GetApiCollectionsData,
  GetApiCollectionsError,
  GetApiCollectionsIdData,
  GetApiCollectionsResponse,
  GetApiMaterialsData,
  GetApiMaterialsError,
  GetApiMaterialsIdData,
  GetApiMaterialsResponse,
  GetApiOrganizationsData,
  GetApiOrganizationsError,
  GetApiOrganizationsIdData,
  GetApiOrganizationsResponse,
  GetApiRolesData,
  GetApiRolesError,
  GetApiRolesIdData,
  GetApiRolesResponse,
  GetApiTransactionsData,
  GetApiTransactionsError,
  GetApiTransactionsIdData,
  GetApiTransactionsResponse,
  GetApiUsersData,
  GetApiUsersError,
  GetApiUsersIdData,
  GetApiUsersResponse,
  PatchApiAddressesIdData,
  PatchApiAddressesIdError,
  PatchApiAddressesIdResponse,
  PatchApiBankDetailsIdData,
  PatchApiBankDetailsIdError,
  PatchApiBankDetailsIdResponse,
  PatchApiCollectionsIdData,
  PatchApiCollectionsIdError,
  PatchApiCollectionsIdResponse,
  PatchApiMaterialsIdData,
  PatchApiMaterialsIdError,
  PatchApiMaterialsIdResponse,
  PatchApiOrganizationsIdData,
  PatchApiOrganizationsIdError,
  PatchApiOrganizationsIdResponse,
  PatchApiRolesIdData,
  PatchApiRolesIdError,
  PatchApiRolesIdResponse,
  PatchApiTransactionsIdData,
  PatchApiTransactionsIdError,
  PatchApiTransactionsIdResponse,
  PatchApiUsersIdData,
  PatchApiUsersIdError,
  PatchApiUsersIdResponse,
  PostApiAddressesData,
  PostApiAddressesError,
  PostApiAddressesResponse,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutError,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyError,
  PostApiBankDetailsData,
  PostApiBankDetailsError,
  PostApiBankDetailsResponse,
  PostApiCollectionsData,
  PostApiCollectionsError,
  PostApiCollectionsResponse,
  PostApiMaterialsData,
  PostApiMaterialsError,
  PostApiMaterialsResponse,
  PostApiOrganizationsData,
  PostApiOrganizationsError,
  PostApiOrganizationsResponse,
  PostApiRolesData,
  PostApiRolesError,
  PostApiRolesResponse,
  PostApiTransactionsData,
  PostApiTransactionsError,
  PostApiTransactionsResponse,
  PostApiUsersData,
  PostApiUsersError,
  PostApiUsersResponse,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAddressesQueryKey = (
  options: Options<GetApiAddressesData>
) => createQueryKey('getApiAddresses', options);

/**
 * List Addresses
 * List all addresses in the system.
 */
export const getApiAddressesOptions = (
  options: Options<GetApiAddressesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAddresses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAddressesQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getApiAddressesInfiniteQueryKey = (
  options: Options<GetApiAddressesData>
): QueryKey<Options<GetApiAddressesData>> =>
  createQueryKey('getApiAddresses', options, true);

/**
 * List Addresses
 * List all addresses in the system.
 */
export const getApiAddressesInfiniteOptions = (
  options: Options<GetApiAddressesData>
) => {
  return infiniteQueryOptions<
    GetApiAddressesResponse,
    GetApiAddressesError,
    InfiniteData<GetApiAddressesResponse>,
    QueryKey<Options<GetApiAddressesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiAddressesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiAddressesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiAddresses({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiAddressesInfiniteQueryKey(options),
    }
  );
};

export const postApiAddressesQueryKey = (
  options: Options<PostApiAddressesData>
) => createQueryKey('postApiAddresses', options);

/**
 * Create Address
 * Create a new address in the system.
 */
export const postApiAddressesOptions = (
  options: Options<PostApiAddressesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAddresses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAddressesQueryKey(options),
  });
};

/**
 * Create Address
 * Create a new address in the system.
 */
export const postApiAddressesMutation = (
  options?: Partial<Options<PostApiAddressesData>>
): UseMutationOptions<
  PostApiAddressesResponse,
  PostApiAddressesError,
  Options<PostApiAddressesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAddressesResponse,
    PostApiAddressesError,
    Options<PostApiAddressesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAddresses({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Address
 * Delete an existing address from the system.
 */
export const deleteApiAddressesIdMutation = (
  options?: Partial<Options<DeleteApiAddressesIdData>>
): UseMutationOptions<
  DeleteApiAddressesIdResponse,
  DeleteApiAddressesIdError,
  Options<DeleteApiAddressesIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiAddressesIdResponse,
    DeleteApiAddressesIdError,
    Options<DeleteApiAddressesIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiAddressesId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAddressesIdQueryKey = (
  options: Options<GetApiAddressesIdData>
) => createQueryKey('getApiAddressesId', options);

/**
 * Find Address
 * Find an existing address in the system.
 */
export const getApiAddressesIdOptions = (
  options: Options<GetApiAddressesIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAddressesId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAddressesIdQueryKey(options),
  });
};

/**
 * Update Address
 * Update an existing address in the system.
 */
export const patchApiAddressesIdMutation = (
  options?: Partial<Options<PatchApiAddressesIdData>>
): UseMutationOptions<
  PatchApiAddressesIdResponse,
  PatchApiAddressesIdError,
  Options<PatchApiAddressesIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiAddressesIdResponse,
    PatchApiAddressesIdError,
    Options<PatchApiAddressesIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiAddressesId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationCheckQueryKey = (
  options?: Options<GetApiAuthenticationCheckData>
) => createQueryKey('getApiAuthenticationCheck', options);

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheckOptions = (
  options?: Options<GetApiAuthenticationCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationCheckQueryKey(options),
  });
};

export const postApiAuthenticationLoginQueryKey = (
  options: Options<PostApiAuthenticationLoginData>
) => createQueryKey('postApiAuthenticationLogin', options);

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginOptions = (
  options: Options<PostApiAuthenticationLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLoginMutation = (
  options?: Partial<Options<PostApiAuthenticationLoginData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLoginError,
  Options<PostApiAuthenticationLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationLogoutQueryKey = (
  options?: Options<PostApiAuthenticationLogoutData>
) => createQueryKey('postApiAuthenticationLogout', options);

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutOptions = (
  options?: Options<PostApiAuthenticationLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLogoutQueryKey(options),
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogoutMutation = (
  options?: Partial<Options<PostApiAuthenticationLogoutData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationLogoutError,
  Options<PostApiAuthenticationLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationLogoutError,
    Options<PostApiAuthenticationLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAuthenticationMfaEnableQueryKey = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => createQueryKey('getApiAuthenticationMfaEnable', options);

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnableOptions = (
  options?: Options<GetApiAuthenticationMfaEnableData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAuthenticationMfaEnable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAuthenticationMfaEnableQueryKey(options),
  });
};

export const postApiAuthenticationMfaVerifyQueryKey = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => createQueryKey('postApiAuthenticationMfaVerify', options);

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyOptions = (
  options: Options<PostApiAuthenticationMfaVerifyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMfaVerifyQueryKey(options),
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerifyMutation = (
  options?: Partial<Options<PostApiAuthenticationMfaVerifyData>>
): UseMutationOptions<
  unknown,
  PostApiAuthenticationMfaVerifyError,
  Options<PostApiAuthenticationMfaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationMfaVerifyError,
    Options<PostApiAuthenticationMfaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMfaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBankDetailsQueryKey = (
  options: Options<GetApiBankDetailsData>
) => createQueryKey('getApiBankDetails', options);

/**
 * List Bank Details
 * List all bank details in the system.
 */
export const getApiBankDetailsOptions = (
  options: Options<GetApiBankDetailsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBankDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBankDetailsQueryKey(options),
  });
};

export const getApiBankDetailsInfiniteQueryKey = (
  options: Options<GetApiBankDetailsData>
): QueryKey<Options<GetApiBankDetailsData>> =>
  createQueryKey('getApiBankDetails', options, true);

/**
 * List Bank Details
 * List all bank details in the system.
 */
export const getApiBankDetailsInfiniteOptions = (
  options: Options<GetApiBankDetailsData>
) => {
  return infiniteQueryOptions<
    GetApiBankDetailsResponse,
    GetApiBankDetailsError,
    InfiniteData<GetApiBankDetailsResponse>,
    QueryKey<Options<GetApiBankDetailsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiBankDetailsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiBankDetailsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiBankDetails({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiBankDetailsInfiniteQueryKey(options),
    }
  );
};

export const postApiBankDetailsQueryKey = (
  options: Options<PostApiBankDetailsData>
) => createQueryKey('postApiBankDetails', options);

/**
 * Create Bank Details
 * Create new bank details in the system.
 */
export const postApiBankDetailsOptions = (
  options: Options<PostApiBankDetailsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBankDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBankDetailsQueryKey(options),
  });
};

/**
 * Create Bank Details
 * Create new bank details in the system.
 */
export const postApiBankDetailsMutation = (
  options?: Partial<Options<PostApiBankDetailsData>>
): UseMutationOptions<
  PostApiBankDetailsResponse,
  PostApiBankDetailsError,
  Options<PostApiBankDetailsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBankDetailsResponse,
    PostApiBankDetailsError,
    Options<PostApiBankDetailsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBankDetails({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Bank Details
 * Delete existing bank details from the system.
 */
export const deleteApiBankDetailsIdMutation = (
  options?: Partial<Options<DeleteApiBankDetailsIdData>>
): UseMutationOptions<
  DeleteApiBankDetailsIdResponse,
  DeleteApiBankDetailsIdError,
  Options<DeleteApiBankDetailsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiBankDetailsIdResponse,
    DeleteApiBankDetailsIdError,
    Options<DeleteApiBankDetailsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiBankDetailsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiBankDetailsIdQueryKey = (
  options: Options<GetApiBankDetailsIdData>
) => createQueryKey('getApiBankDetailsId', options);

/**
 * Find Bank Detail
 * Find existing bank details in the system.
 */
export const getApiBankDetailsIdOptions = (
  options: Options<GetApiBankDetailsIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBankDetailsId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBankDetailsIdQueryKey(options),
  });
};

/**
 * Update Bank Details
 * Update existing bank details in the system.
 */
export const patchApiBankDetailsIdMutation = (
  options?: Partial<Options<PatchApiBankDetailsIdData>>
): UseMutationOptions<
  PatchApiBankDetailsIdResponse,
  PatchApiBankDetailsIdError,
  Options<PatchApiBankDetailsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiBankDetailsIdResponse,
    PatchApiBankDetailsIdError,
    Options<PatchApiBankDetailsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiBankDetailsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsQueryKey = (
  options: Options<GetApiCollectionsData>
) => createQueryKey('getApiCollections', options);

/**
 * List Collections
 * List all collections in the system.
 */
export const getApiCollectionsOptions = (
  options: Options<GetApiCollectionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsQueryKey(options),
  });
};

export const getApiCollectionsInfiniteQueryKey = (
  options: Options<GetApiCollectionsData>
): QueryKey<Options<GetApiCollectionsData>> =>
  createQueryKey('getApiCollections', options, true);

/**
 * List Collections
 * List all collections in the system.
 */
export const getApiCollectionsInfiniteOptions = (
  options: Options<GetApiCollectionsData>
) => {
  return infiniteQueryOptions<
    GetApiCollectionsResponse,
    GetApiCollectionsError,
    InfiniteData<GetApiCollectionsResponse>,
    QueryKey<Options<GetApiCollectionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiCollectionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiCollectionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiCollections({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiCollectionsInfiniteQueryKey(options),
    }
  );
};

export const postApiCollectionsQueryKey = (
  options: Options<PostApiCollectionsData>
) => createQueryKey('postApiCollections', options);

/**
 * Create Collection
 * Create a new collection in the system.
 */
export const postApiCollectionsOptions = (
  options: Options<PostApiCollectionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiCollectionsQueryKey(options),
  });
};

/**
 * Create Collection
 * Create a new collection in the system.
 */
export const postApiCollectionsMutation = (
  options?: Partial<Options<PostApiCollectionsData>>
): UseMutationOptions<
  PostApiCollectionsResponse,
  PostApiCollectionsError,
  Options<PostApiCollectionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiCollectionsResponse,
    PostApiCollectionsError,
    Options<PostApiCollectionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCollections({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Collection
 * Delete an existing collection from the system.
 */
export const deleteApiCollectionsIdMutation = (
  options?: Partial<Options<DeleteApiCollectionsIdData>>
): UseMutationOptions<
  DeleteApiCollectionsIdResponse,
  DeleteApiCollectionsIdError,
  Options<DeleteApiCollectionsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiCollectionsIdResponse,
    DeleteApiCollectionsIdError,
    Options<DeleteApiCollectionsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiCollectionsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCollectionsIdQueryKey = (
  options: Options<GetApiCollectionsIdData>
) => createQueryKey('getApiCollectionsId', options);

/**
 * Find Collection
 * Find an existing collection in the system.
 */
export const getApiCollectionsIdOptions = (
  options: Options<GetApiCollectionsIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCollectionsId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCollectionsIdQueryKey(options),
  });
};

/**
 * Update Collection
 * Update an existing collection in the system.
 */
export const patchApiCollectionsIdMutation = (
  options?: Partial<Options<PatchApiCollectionsIdData>>
): UseMutationOptions<
  PatchApiCollectionsIdResponse,
  PatchApiCollectionsIdError,
  Options<PatchApiCollectionsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiCollectionsIdResponse,
    PatchApiCollectionsIdError,
    Options<PatchApiCollectionsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiCollectionsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsQueryKey = (
  options: Options<GetApiMaterialsData>
) => createQueryKey('getApiMaterials', options);

/**
 * List Materials
 * List all materials in the system.
 */
export const getApiMaterialsOptions = (
  options: Options<GetApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsQueryKey(options),
  });
};

export const getApiMaterialsInfiniteQueryKey = (
  options: Options<GetApiMaterialsData>
): QueryKey<Options<GetApiMaterialsData>> =>
  createQueryKey('getApiMaterials', options, true);

/**
 * List Materials
 * List all materials in the system.
 */
export const getApiMaterialsInfiniteOptions = (
  options: Options<GetApiMaterialsData>
) => {
  return infiniteQueryOptions<
    GetApiMaterialsResponse,
    GetApiMaterialsError,
    InfiniteData<GetApiMaterialsResponse>,
    QueryKey<Options<GetApiMaterialsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiMaterialsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiMaterialsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiMaterials({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiMaterialsInfiniteQueryKey(options),
    }
  );
};

export const postApiMaterialsQueryKey = (
  options: Options<PostApiMaterialsData>
) => createQueryKey('postApiMaterials', options);

/**
 * Create Material
 * Create a new material in the system.
 */
export const postApiMaterialsOptions = (
  options: Options<PostApiMaterialsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiMaterials({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiMaterialsQueryKey(options),
  });
};

/**
 * Create Material
 * Create a new material in the system.
 */
export const postApiMaterialsMutation = (
  options?: Partial<Options<PostApiMaterialsData>>
): UseMutationOptions<
  PostApiMaterialsResponse,
  PostApiMaterialsError,
  Options<PostApiMaterialsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiMaterialsResponse,
    PostApiMaterialsError,
    Options<PostApiMaterialsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiMaterials({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Material
 * Delete an existing material from the system.
 */
export const deleteApiMaterialsIdMutation = (
  options?: Partial<Options<DeleteApiMaterialsIdData>>
): UseMutationOptions<
  DeleteApiMaterialsIdResponse,
  DeleteApiMaterialsIdError,
  Options<DeleteApiMaterialsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiMaterialsIdResponse,
    DeleteApiMaterialsIdError,
    Options<DeleteApiMaterialsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiMaterialsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMaterialsIdQueryKey = (
  options: Options<GetApiMaterialsIdData>
) => createQueryKey('getApiMaterialsId', options);

/**
 * Find Material
 * Find an existing material in the system.
 */
export const getApiMaterialsIdOptions = (
  options: Options<GetApiMaterialsIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMaterialsId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMaterialsIdQueryKey(options),
  });
};

/**
 * Update Material
 * Update an existing material in the system.
 */
export const patchApiMaterialsIdMutation = (
  options?: Partial<Options<PatchApiMaterialsIdData>>
): UseMutationOptions<
  PatchApiMaterialsIdResponse,
  PatchApiMaterialsIdError,
  Options<PatchApiMaterialsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiMaterialsIdResponse,
    PatchApiMaterialsIdError,
    Options<PatchApiMaterialsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiMaterialsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsQueryKey = (
  options: Options<GetApiOrganizationsData>
) => createQueryKey('getApiOrganizations', options);

/**
 * List Organizations
 * List all organizations in the system.
 */
export const getApiOrganizationsOptions = (
  options: Options<GetApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsQueryKey(options),
  });
};

export const getApiOrganizationsInfiniteQueryKey = (
  options: Options<GetApiOrganizationsData>
): QueryKey<Options<GetApiOrganizationsData>> =>
  createQueryKey('getApiOrganizations', options, true);

/**
 * List Organizations
 * List all organizations in the system.
 */
export const getApiOrganizationsInfiniteOptions = (
  options: Options<GetApiOrganizationsData>
) => {
  return infiniteQueryOptions<
    GetApiOrganizationsResponse,
    GetApiOrganizationsError,
    InfiniteData<GetApiOrganizationsResponse>,
    QueryKey<Options<GetApiOrganizationsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiOrganizationsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiOrganizationsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiOrganizations({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiOrganizationsInfiniteQueryKey(options),
    }
  );
};

export const postApiOrganizationsQueryKey = (
  options: Options<PostApiOrganizationsData>
) => createQueryKey('postApiOrganizations', options);

/**
 * Create Organization
 * Create a new organization in the system.
 */
export const postApiOrganizationsOptions = (
  options: Options<PostApiOrganizationsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiOrganizationsQueryKey(options),
  });
};

/**
 * Create Organization
 * Create a new organization in the system.
 */
export const postApiOrganizationsMutation = (
  options?: Partial<Options<PostApiOrganizationsData>>
): UseMutationOptions<
  PostApiOrganizationsResponse,
  PostApiOrganizationsError,
  Options<PostApiOrganizationsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiOrganizationsResponse,
    PostApiOrganizationsError,
    Options<PostApiOrganizationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiOrganizations({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Organization
 * Delete an existing organization from the system.
 */
export const deleteApiOrganizationsIdMutation = (
  options?: Partial<Options<DeleteApiOrganizationsIdData>>
): UseMutationOptions<
  DeleteApiOrganizationsIdResponse,
  DeleteApiOrganizationsIdError,
  Options<DeleteApiOrganizationsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiOrganizationsIdResponse,
    DeleteApiOrganizationsIdError,
    Options<DeleteApiOrganizationsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiOrganizationsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiOrganizationsIdQueryKey = (
  options: Options<GetApiOrganizationsIdData>
) => createQueryKey('getApiOrganizationsId', options);

/**
 * Find Organization
 * Find an existing organization in the system.
 */
export const getApiOrganizationsIdOptions = (
  options: Options<GetApiOrganizationsIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiOrganizationsId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiOrganizationsIdQueryKey(options),
  });
};

/**
 * Update Organization
 * Update an existing organization in the system.
 */
export const patchApiOrganizationsIdMutation = (
  options?: Partial<Options<PatchApiOrganizationsIdData>>
): UseMutationOptions<
  PatchApiOrganizationsIdResponse,
  PatchApiOrganizationsIdError,
  Options<PatchApiOrganizationsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiOrganizationsIdResponse,
    PatchApiOrganizationsIdError,
    Options<PatchApiOrganizationsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiOrganizationsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesQueryKey = (options: Options<GetApiRolesData>) =>
  createQueryKey('getApiRoles', options);

/**
 * List Roles
 * List all roles in the system.
 */
export const getApiRolesOptions = (options: Options<GetApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesQueryKey(options),
  });
};

export const getApiRolesInfiniteQueryKey = (
  options: Options<GetApiRolesData>
): QueryKey<Options<GetApiRolesData>> =>
  createQueryKey('getApiRoles', options, true);

/**
 * List Roles
 * List all roles in the system.
 */
export const getApiRolesInfiniteOptions = (
  options: Options<GetApiRolesData>
) => {
  return infiniteQueryOptions<
    GetApiRolesResponse,
    GetApiRolesError,
    InfiniteData<GetApiRolesResponse>,
    QueryKey<Options<GetApiRolesData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiRolesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiRolesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiRoles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiRolesInfiniteQueryKey(options),
    }
  );
};

export const postApiRolesQueryKey = (options: Options<PostApiRolesData>) =>
  createQueryKey('postApiRoles', options);

/**
 * Create Role
 * Create a new role in the system.
 */
export const postApiRolesOptions = (options: Options<PostApiRolesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiRoles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiRolesQueryKey(options),
  });
};

/**
 * Create Role
 * Create a new role in the system.
 */
export const postApiRolesMutation = (
  options?: Partial<Options<PostApiRolesData>>
): UseMutationOptions<
  PostApiRolesResponse,
  PostApiRolesError,
  Options<PostApiRolesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiRolesResponse,
    PostApiRolesError,
    Options<PostApiRolesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiRoles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Role
 * Delete an existing role from the system.
 */
export const deleteApiRolesIdMutation = (
  options?: Partial<Options<DeleteApiRolesIdData>>
): UseMutationOptions<
  DeleteApiRolesIdResponse,
  DeleteApiRolesIdError,
  Options<DeleteApiRolesIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiRolesIdResponse,
    DeleteApiRolesIdError,
    Options<DeleteApiRolesIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiRolesId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiRolesIdQueryKey = (options: Options<GetApiRolesIdData>) =>
  createQueryKey('getApiRolesId', options);

/**
 * Find Role
 * Find an existing role in the system.
 */
export const getApiRolesIdOptions = (options: Options<GetApiRolesIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRolesId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRolesIdQueryKey(options),
  });
};

/**
 * Update Role
 * Update an existing role in the system.
 */
export const patchApiRolesIdMutation = (
  options?: Partial<Options<PatchApiRolesIdData>>
): UseMutationOptions<
  PatchApiRolesIdResponse,
  PatchApiRolesIdError,
  Options<PatchApiRolesIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiRolesIdResponse,
    PatchApiRolesIdError,
    Options<PatchApiRolesIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiRolesId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsQueryKey = (
  options: Options<GetApiTransactionsData>
) => createQueryKey('getApiTransactions', options);

/**
 * List Transactions
 * List all transactions in the system.
 */
export const getApiTransactionsOptions = (
  options: Options<GetApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsQueryKey(options),
  });
};

export const getApiTransactionsInfiniteQueryKey = (
  options: Options<GetApiTransactionsData>
): QueryKey<Options<GetApiTransactionsData>> =>
  createQueryKey('getApiTransactions', options, true);

/**
 * List Transactions
 * List all transactions in the system.
 */
export const getApiTransactionsInfiniteOptions = (
  options: Options<GetApiTransactionsData>
) => {
  return infiniteQueryOptions<
    GetApiTransactionsResponse,
    GetApiTransactionsError,
    InfiniteData<GetApiTransactionsResponse>,
    QueryKey<Options<GetApiTransactionsData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiTransactionsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiTransactionsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiTransactions({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiTransactionsInfiniteQueryKey(options),
    }
  );
};

export const postApiTransactionsQueryKey = (
  options: Options<PostApiTransactionsData>
) => createQueryKey('postApiTransactions', options);

/**
 * Create Transaction
 * Create a new transaction in the system.
 */
export const postApiTransactionsOptions = (
  options: Options<PostApiTransactionsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTransactionsQueryKey(options),
  });
};

/**
 * Create Transaction
 * Create a new transaction in the system.
 */
export const postApiTransactionsMutation = (
  options?: Partial<Options<PostApiTransactionsData>>
): UseMutationOptions<
  PostApiTransactionsResponse,
  PostApiTransactionsError,
  Options<PostApiTransactionsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTransactionsResponse,
    PostApiTransactionsError,
    Options<PostApiTransactionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTransactions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Transaction
 * Delete an existing transaction from the system.
 */
export const deleteApiTransactionsIdMutation = (
  options?: Partial<Options<DeleteApiTransactionsIdData>>
): UseMutationOptions<
  DeleteApiTransactionsIdResponse,
  DeleteApiTransactionsIdError,
  Options<DeleteApiTransactionsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiTransactionsIdResponse,
    DeleteApiTransactionsIdError,
    Options<DeleteApiTransactionsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiTransactionsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTransactionsIdQueryKey = (
  options: Options<GetApiTransactionsIdData>
) => createQueryKey('getApiTransactionsId', options);

/**
 * Find Transaction
 * Find an existing transaction in the system.
 */
export const getApiTransactionsIdOptions = (
  options: Options<GetApiTransactionsIdData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTransactionsId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTransactionsIdQueryKey(options),
  });
};

/**
 * Update Transaction
 * Update an existing transaction in the system.
 */
export const patchApiTransactionsIdMutation = (
  options?: Partial<Options<PatchApiTransactionsIdData>>
): UseMutationOptions<
  PatchApiTransactionsIdResponse,
  PatchApiTransactionsIdError,
  Options<PatchApiTransactionsIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiTransactionsIdResponse,
    PatchApiTransactionsIdError,
    Options<PatchApiTransactionsIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiTransactionsId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersQueryKey = (options: Options<GetApiUsersData>) =>
  createQueryKey('getApiUsers', options);

/**
 * List Users
 * List all users in the system.
 */
export const getApiUsersOptions = (options: Options<GetApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersQueryKey(options),
  });
};

export const getApiUsersInfiniteQueryKey = (
  options: Options<GetApiUsersData>
): QueryKey<Options<GetApiUsersData>> =>
  createQueryKey('getApiUsers', options, true);

/**
 * List Users
 * List all users in the system.
 */
export const getApiUsersInfiniteOptions = (
  options: Options<GetApiUsersData>
) => {
  return infiniteQueryOptions<
    GetApiUsersResponse,
    GetApiUsersError,
    InfiniteData<GetApiUsersResponse>,
    QueryKey<Options<GetApiUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetApiUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetApiUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getApiUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getApiUsersInfiniteQueryKey(options),
    }
  );
};

export const postApiUsersQueryKey = (options: Options<PostApiUsersData>) =>
  createQueryKey('postApiUsers', options);

/**
 * Create User
 * Create a new user in the system.
 */
export const postApiUsersOptions = (options: Options<PostApiUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUsersQueryKey(options),
  });
};

/**
 * Create User
 * Create a new user in the system.
 */
export const postApiUsersMutation = (
  options?: Partial<Options<PostApiUsersData>>
): UseMutationOptions<
  PostApiUsersResponse,
  PostApiUsersError,
  Options<PostApiUsersData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUsersResponse,
    PostApiUsersError,
    Options<PostApiUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * Delete an existing user from the system.
 */
export const deleteApiUsersIdMutation = (
  options?: Partial<Options<DeleteApiUsersIdData>>
): UseMutationOptions<
  DeleteApiUsersIdResponse,
  DeleteApiUsersIdError,
  Options<DeleteApiUsersIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiUsersIdResponse,
    DeleteApiUsersIdError,
    Options<DeleteApiUsersIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUsersId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUsersIdQueryKey = (options: Options<GetApiUsersIdData>) =>
  createQueryKey('getApiUsersId', options);

/**
 * Find User
 * Find an existing user in the system.
 */
export const getApiUsersIdOptions = (options: Options<GetApiUsersIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUsersId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUsersIdQueryKey(options),
  });
};

/**
 * Update User
 * Update an existing user in the system.
 */
export const patchApiUsersIdMutation = (
  options?: Partial<Options<PatchApiUsersIdData>>
): UseMutationOptions<
  PatchApiUsersIdResponse,
  PatchApiUsersIdError,
  Options<PatchApiUsersIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchApiUsersIdResponse,
    PatchApiUsersIdError,
    Options<PatchApiUsersIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchApiUsersId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
