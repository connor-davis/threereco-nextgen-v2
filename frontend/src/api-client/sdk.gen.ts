// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  DeleteApiMaterialsByIdData,
  DeleteApiMaterialsByIdErrors,
  DeleteApiMaterialsByIdResponses,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationCheckErrors,
  GetApiAuthenticationCheckResponses,
  GetApiAuthenticationMfaEnableData,
  GetApiAuthenticationMfaEnableErrors,
  GetApiAuthenticationMfaEnableResponses,
  GetApiMaterialsByIdData,
  GetApiMaterialsByIdErrors,
  GetApiMaterialsByIdResponses,
  GetApiMaterialsData,
  GetApiMaterialsErrors,
  GetApiMaterialsResponses,
  PatchApiMaterialsByIdData,
  PatchApiMaterialsByIdErrors,
  PatchApiMaterialsByIdResponses,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginErrors,
  PostApiAuthenticationLoginResponses,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutErrors,
  PostApiAuthenticationLogoutResponses,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyErrors,
  PostApiAuthenticationMfaVerifyResponses,
  PostApiMaterialsData,
  PostApiMaterialsErrors,
  PostApiMaterialsResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheck = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthenticationCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationCheckResponses,
    GetApiAuthenticationCheckErrors,
    ThrowOnError
  >({
    url: '/api/authentication/check',
    ...options,
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLogin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationLoginResponses,
    PostApiAuthenticationLoginErrors,
    ThrowOnError
  >({
    url: '/api/authentication/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogout = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiAuthenticationLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationLogoutResponses,
    PostApiAuthenticationLogoutErrors,
    ThrowOnError
  >({
    url: '/api/authentication/logout',
    ...options,
  });
};

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnable = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiAuthenticationMfaEnableData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationMfaEnableResponses,
    GetApiAuthenticationMfaEnableErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/enable',
    ...options,
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationMfaVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationMfaVerifyResponses,
    PostApiAuthenticationMfaVerifyErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Materials
 * List all materials in the system.
 */
export const getApiMaterials = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiMaterialsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiMaterialsResponses,
    GetApiMaterialsErrors,
    ThrowOnError
  >({
    url: '/api/materials',
    ...options,
  });
};

/**
 * Create Material
 * Create a new material in the system.
 */
export const postApiMaterials = <ThrowOnError extends boolean = false>(
  options: Options<PostApiMaterialsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiMaterialsResponses,
    PostApiMaterialsErrors,
    ThrowOnError
  >({
    url: '/api/materials',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Material
 * Delete an existing material from the system.
 */
export const deleteApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiMaterialsByIdResponses,
    DeleteApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/{id}',
    ...options,
  });
};

/**
 * Find Material
 * Find an existing material in the system.
 */
export const getApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiMaterialsByIdResponses,
    GetApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/{id}',
    ...options,
  });
};

/**
 * Update Material
 * Update an existing material in the system.
 */
export const patchApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiMaterialsByIdResponses,
    PatchApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
