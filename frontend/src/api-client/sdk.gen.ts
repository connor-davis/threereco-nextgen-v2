// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  DeleteApiAddressesByIdData,
  DeleteApiAddressesByIdErrors,
  DeleteApiAddressesByIdResponses,
  DeleteApiBankDetailsByIdData,
  DeleteApiBankDetailsByIdErrors,
  DeleteApiBankDetailsByIdResponses,
  DeleteApiCollectionsByIdData,
  DeleteApiCollectionsByIdErrors,
  DeleteApiCollectionsByIdResponses,
  DeleteApiMaterialsByIdData,
  DeleteApiMaterialsByIdErrors,
  DeleteApiMaterialsByIdResponses,
  DeleteApiOrganizationsByIdData,
  DeleteApiOrganizationsByIdErrors,
  DeleteApiOrganizationsByIdResponses,
  DeleteApiRolesByIdData,
  DeleteApiRolesByIdErrors,
  DeleteApiRolesByIdResponses,
  DeleteApiTransactionsByIdData,
  DeleteApiTransactionsByIdErrors,
  DeleteApiTransactionsByIdResponses,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdErrors,
  DeleteApiUsersByIdResponses,
  GetApiAddressesByIdData,
  GetApiAddressesByIdErrors,
  GetApiAddressesByIdResponses,
  GetApiAddressesData,
  GetApiAddressesErrors,
  GetApiAddressesResponses,
  GetApiAuthenticationCheckData,
  GetApiAuthenticationCheckErrors,
  GetApiAuthenticationCheckResponses,
  GetApiAuthenticationMfaEnableData,
  GetApiAuthenticationMfaEnableErrors,
  GetApiAuthenticationMfaEnableResponses,
  GetApiBankDetailsByIdData,
  GetApiBankDetailsByIdErrors,
  GetApiBankDetailsByIdResponses,
  GetApiBankDetailsData,
  GetApiBankDetailsErrors,
  GetApiBankDetailsResponses,
  GetApiCollectionsByIdData,
  GetApiCollectionsByIdErrors,
  GetApiCollectionsByIdResponses,
  GetApiCollectionsData,
  GetApiCollectionsErrors,
  GetApiCollectionsResponses,
  GetApiMaterialsByIdData,
  GetApiMaterialsByIdErrors,
  GetApiMaterialsByIdResponses,
  GetApiMaterialsData,
  GetApiMaterialsErrors,
  GetApiMaterialsResponses,
  GetApiOrganizationsByIdData,
  GetApiOrganizationsByIdErrors,
  GetApiOrganizationsByIdResponses,
  GetApiOrganizationsData,
  GetApiOrganizationsErrors,
  GetApiOrganizationsResponses,
  GetApiRolesByIdData,
  GetApiRolesByIdErrors,
  GetApiRolesByIdResponses,
  GetApiRolesData,
  GetApiRolesErrors,
  GetApiRolesResponses,
  GetApiTransactionsByIdData,
  GetApiTransactionsByIdErrors,
  GetApiTransactionsByIdResponses,
  GetApiTransactionsData,
  GetApiTransactionsErrors,
  GetApiTransactionsResponses,
  GetApiUsersByIdData,
  GetApiUsersByIdErrors,
  GetApiUsersByIdResponses,
  GetApiUsersData,
  GetApiUsersErrors,
  GetApiUsersResponses,
  PatchApiAddressesByIdData,
  PatchApiAddressesByIdErrors,
  PatchApiAddressesByIdResponses,
  PatchApiBankDetailsByIdData,
  PatchApiBankDetailsByIdErrors,
  PatchApiBankDetailsByIdResponses,
  PatchApiCollectionsByIdData,
  PatchApiCollectionsByIdErrors,
  PatchApiCollectionsByIdResponses,
  PatchApiMaterialsByIdData,
  PatchApiMaterialsByIdErrors,
  PatchApiMaterialsByIdResponses,
  PatchApiOrganizationsByIdData,
  PatchApiOrganizationsByIdErrors,
  PatchApiOrganizationsByIdResponses,
  PatchApiRolesByIdData,
  PatchApiRolesByIdErrors,
  PatchApiRolesByIdResponses,
  PatchApiTransactionsByIdData,
  PatchApiTransactionsByIdErrors,
  PatchApiTransactionsByIdResponses,
  PatchApiUsersByIdData,
  PatchApiUsersByIdErrors,
  PatchApiUsersByIdResponses,
  PostApiAddressesData,
  PostApiAddressesErrors,
  PostApiAddressesResponses,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginErrors,
  PostApiAuthenticationLoginResponses,
  PostApiAuthenticationLogoutData,
  PostApiAuthenticationLogoutErrors,
  PostApiAuthenticationLogoutResponses,
  PostApiAuthenticationMfaVerifyData,
  PostApiAuthenticationMfaVerifyErrors,
  PostApiAuthenticationMfaVerifyResponses,
  PostApiBankDetailsData,
  PostApiBankDetailsErrors,
  PostApiBankDetailsResponses,
  PostApiCollectionsData,
  PostApiCollectionsErrors,
  PostApiCollectionsResponses,
  PostApiMaterialsData,
  PostApiMaterialsErrors,
  PostApiMaterialsResponses,
  PostApiOrganizationsData,
  PostApiOrganizationsErrors,
  PostApiOrganizationsResponses,
  PostApiRolesData,
  PostApiRolesErrors,
  PostApiRolesResponses,
  PostApiTransactionsData,
  PostApiTransactionsErrors,
  PostApiTransactionsResponses,
  PostApiUsersData,
  PostApiUsersErrors,
  PostApiUsersResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List Addresses
 * List all addresses in the system.
 */
export const getApiAddresses = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAddressesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiAddressesResponses,
    GetApiAddressesErrors,
    ThrowOnError
  >({
    url: '/api/addresses',
    ...options,
  });
};

/**
 * Create Address
 * Create a new address in the system.
 */
export const postApiAddresses = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAddressesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAddressesResponses,
    PostApiAddressesErrors,
    ThrowOnError
  >({
    url: '/api/addresses',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Address
 * Delete an existing address from the system.
 */
export const deleteApiAddressesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiAddressesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiAddressesByIdResponses,
    DeleteApiAddressesByIdErrors,
    ThrowOnError
  >({
    url: '/api/addresses/:id',
    ...options,
  });
};

/**
 * Find Address
 * Find an existing address in the system.
 */
export const getApiAddressesById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiAddressesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiAddressesByIdResponses,
    GetApiAddressesByIdErrors,
    ThrowOnError
  >({
    url: '/api/addresses/:id',
    ...options,
  });
};

/**
 * Update Address
 * Update an existing address in the system.
 */
export const patchApiAddressesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiAddressesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiAddressesByIdResponses,
    PatchApiAddressesByIdErrors,
    ThrowOnError
  >({
    url: '/api/addresses/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check Authentication
 * Checks if the user is authenticated and returns their user information.
 */
export const getApiAuthenticationCheck = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiAuthenticationCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationCheckResponses,
    GetApiAuthenticationCheckErrors,
    ThrowOnError
  >({
    url: '/api/authentication/check',
    ...options,
  });
};

/**
 * Login
 * Logs in a user with email and password.
 */
export const postApiAuthenticationLogin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationLoginResponses,
    PostApiAuthenticationLoginErrors,
    ThrowOnError
  >({
    url: '/api/authentication/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Logout
 * Logs out the user and invalidates their session.
 */
export const postApiAuthenticationLogout = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostApiAuthenticationLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationLogoutResponses,
    PostApiAuthenticationLogoutErrors,
    ThrowOnError
  >({
    url: '/api/authentication/logout',
    ...options,
  });
};

/**
 * Enable Multi-Factor Authentication (MFA)
 * Generates a QR code for enabling Multi-Factor Authentication (MFA) for the user.
 */
export const getApiAuthenticationMfaEnable = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiAuthenticationMfaEnableData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiAuthenticationMfaEnableResponses,
    GetApiAuthenticationMfaEnableErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/enable',
    ...options,
  });
};

/**
 * Verify Multi-Factor Authentication (MFA)
 * Verifies the user's MFA status.
 */
export const postApiAuthenticationMfaVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiAuthenticationMfaVerifyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthenticationMfaVerifyResponses,
    PostApiAuthenticationMfaVerifyErrors,
    ThrowOnError
  >({
    url: '/api/authentication/mfa/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Bank Details
 * List all bank details in the system.
 */
export const getApiBankDetails = <ThrowOnError extends boolean = false>(
  options: Options<GetApiBankDetailsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiBankDetailsResponses,
    GetApiBankDetailsErrors,
    ThrowOnError
  >({
    url: '/api/bank-details',
    ...options,
  });
};

/**
 * Create Bank Details
 * Create new bank details in the system.
 */
export const postApiBankDetails = <ThrowOnError extends boolean = false>(
  options: Options<PostApiBankDetailsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiBankDetailsResponses,
    PostApiBankDetailsErrors,
    ThrowOnError
  >({
    url: '/api/bank-details',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Bank Details
 * Delete existing bank details from the system.
 */
export const deleteApiBankDetailsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiBankDetailsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiBankDetailsByIdResponses,
    DeleteApiBankDetailsByIdErrors,
    ThrowOnError
  >({
    url: '/api/bank-details/:id',
    ...options,
  });
};

/**
 * Find Bank Detail
 * Find existing bank details in the system.
 */
export const getApiBankDetailsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiBankDetailsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiBankDetailsByIdResponses,
    GetApiBankDetailsByIdErrors,
    ThrowOnError
  >({
    url: '/api/bank-details/:id',
    ...options,
  });
};

/**
 * Update Bank Details
 * Update existing bank details in the system.
 */
export const patchApiBankDetailsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiBankDetailsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiBankDetailsByIdResponses,
    PatchApiBankDetailsByIdErrors,
    ThrowOnError
  >({
    url: '/api/bank-details/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Collections
 * List all collections in the system.
 */
export const getApiCollections = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCollectionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiCollectionsResponses,
    GetApiCollectionsErrors,
    ThrowOnError
  >({
    url: '/api/collections',
    ...options,
  });
};

/**
 * Create Collection
 * Create a new collection in the system.
 */
export const postApiCollections = <ThrowOnError extends boolean = false>(
  options: Options<PostApiCollectionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiCollectionsResponses,
    PostApiCollectionsErrors,
    ThrowOnError
  >({
    url: '/api/collections',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Collection
 * Delete an existing collection from the system.
 */
export const deleteApiCollectionsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiCollectionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiCollectionsByIdResponses,
    DeleteApiCollectionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/collections/:id',
    ...options,
  });
};

/**
 * Find Collection
 * Find an existing collection in the system.
 */
export const getApiCollectionsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCollectionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiCollectionsByIdResponses,
    GetApiCollectionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/collections/:id',
    ...options,
  });
};

/**
 * Update Collection
 * Update an existing collection in the system.
 */
export const patchApiCollectionsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiCollectionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiCollectionsByIdResponses,
    PatchApiCollectionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/collections/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Materials
 * List all materials in the system.
 */
export const getApiMaterials = <ThrowOnError extends boolean = false>(
  options: Options<GetApiMaterialsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiMaterialsResponses,
    GetApiMaterialsErrors,
    ThrowOnError
  >({
    url: '/api/materials',
    ...options,
  });
};

/**
 * Create Material
 * Create a new material in the system.
 */
export const postApiMaterials = <ThrowOnError extends boolean = false>(
  options: Options<PostApiMaterialsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiMaterialsResponses,
    PostApiMaterialsErrors,
    ThrowOnError
  >({
    url: '/api/materials',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Material
 * Delete an existing material from the system.
 */
export const deleteApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiMaterialsByIdResponses,
    DeleteApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/:id',
    ...options,
  });
};

/**
 * Find Material
 * Find an existing material in the system.
 */
export const getApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiMaterialsByIdResponses,
    GetApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/:id',
    ...options,
  });
};

/**
 * Update Material
 * Update an existing material in the system.
 */
export const patchApiMaterialsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiMaterialsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiMaterialsByIdResponses,
    PatchApiMaterialsByIdErrors,
    ThrowOnError
  >({
    url: '/api/materials/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Organizations
 * List all organizations in the system.
 */
export const getApiOrganizations = <ThrowOnError extends boolean = false>(
  options: Options<GetApiOrganizationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiOrganizationsResponses,
    GetApiOrganizationsErrors,
    ThrowOnError
  >({
    url: '/api/organizations',
    ...options,
  });
};

/**
 * Create Organization
 * Create a new organization in the system.
 */
export const postApiOrganizations = <ThrowOnError extends boolean = false>(
  options: Options<PostApiOrganizationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiOrganizationsResponses,
    PostApiOrganizationsErrors,
    ThrowOnError
  >({
    url: '/api/organizations',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Organization
 * Delete an existing organization from the system.
 */
export const deleteApiOrganizationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiOrganizationsByIdResponses,
    DeleteApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/:id',
    ...options,
  });
};

/**
 * Find Organization
 * Find an existing organization in the system.
 */
export const getApiOrganizationsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiOrganizationsByIdResponses,
    GetApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/:id',
    ...options,
  });
};

/**
 * Update Organization
 * Update an existing organization in the system.
 */
export const patchApiOrganizationsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiOrganizationsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiOrganizationsByIdResponses,
    PatchApiOrganizationsByIdErrors,
    ThrowOnError
  >({
    url: '/api/organizations/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Roles
 * List all roles in the system.
 */
export const getApiRoles = <ThrowOnError extends boolean = false>(
  options: Options<GetApiRolesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiRolesResponses,
    GetApiRolesErrors,
    ThrowOnError
  >({
    url: '/api/roles',
    ...options,
  });
};

/**
 * Create Role
 * Create a new role in the system.
 */
export const postApiRoles = <ThrowOnError extends boolean = false>(
  options: Options<PostApiRolesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiRolesResponses,
    PostApiRolesErrors,
    ThrowOnError
  >({
    url: '/api/roles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Role
 * Delete an existing role from the system.
 */
export const deleteApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiRolesByIdResponses,
    DeleteApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/:id',
    ...options,
  });
};

/**
 * Find Role
 * Find an existing role in the system.
 */
export const getApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiRolesByIdResponses,
    GetApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/:id',
    ...options,
  });
};

/**
 * Update Role
 * Update an existing role in the system.
 */
export const patchApiRolesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiRolesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiRolesByIdResponses,
    PatchApiRolesByIdErrors,
    ThrowOnError
  >({
    url: '/api/roles/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Transactions
 * List all transactions in the system.
 */
export const getApiTransactions = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTransactionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTransactionsResponses,
    GetApiTransactionsErrors,
    ThrowOnError
  >({
    url: '/api/transactions',
    ...options,
  });
};

/**
 * Create Transaction
 * Create a new transaction in the system.
 */
export const postApiTransactions = <ThrowOnError extends boolean = false>(
  options: Options<PostApiTransactionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiTransactionsResponses,
    PostApiTransactionsErrors,
    ThrowOnError
  >({
    url: '/api/transactions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete Transaction
 * Delete an existing transaction from the system.
 */
export const deleteApiTransactionsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiTransactionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiTransactionsByIdResponses,
    DeleteApiTransactionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/transactions/:id',
    ...options,
  });
};

/**
 * Find Transaction
 * Find an existing transaction in the system.
 */
export const getApiTransactionsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiTransactionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiTransactionsByIdResponses,
    GetApiTransactionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/transactions/:id',
    ...options,
  });
};

/**
 * Update Transaction
 * Update an existing transaction in the system.
 */
export const patchApiTransactionsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiTransactionsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiTransactionsByIdResponses,
    PatchApiTransactionsByIdErrors,
    ThrowOnError
  >({
    url: '/api/transactions/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List Users
 * List all users in the system.
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersResponses,
    GetApiUsersErrors,
    ThrowOnError
  >({
    url: '/api/users',
    ...options,
  });
};

/**
 * Create User
 * Create a new user in the system.
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersResponses,
    PostApiUsersErrors,
    ThrowOnError
  >({
    url: '/api/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete User
 * Delete an existing user from the system.
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersByIdResponses,
    DeleteApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/:id',
    ...options,
  });
};

/**
 * Find User
 * Find an existing user in the system.
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/:id',
    ...options,
  });
};

/**
 * Update User
 * Update an existing user in the system.
 */
export const patchApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<PatchApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchApiUsersByIdResponses,
    PatchApiUsersByIdErrors,
    ThrowOnError
  >({
    url: '/api/users/:id',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
