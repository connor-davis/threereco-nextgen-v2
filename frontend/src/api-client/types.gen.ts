// This file is auto-generated by @hey-api/openapi-ts

export type Address = {
  city: string;
  country: string;
  createdAt: string;
  id: string;
  lineOne: string;
  lineTwo: string | null;
  province: string;
  updatedAt: string;
  zipCode: string;
} | null;

export type Addresses = Array<{
  city: string;
  country: string;
  createdAt: string;
  id: string;
  lineOne: string;
  lineTwo: string | null;
  province: string;
  updatedAt: string;
  zipCode: string;
} | null>;

export type BankDetail = {
  accountHolder: string;
  accountNumber: string;
  bankName: string;
  branchName: string;
  createdAt: string;
  id: string;
  updatedAt: string;
} | null;

export type BankDetails = Array<{
  accountHolder: string;
  accountNumber: string;
  bankName: string;
  branchName: string;
  createdAt: string;
  id: string;
  updatedAt: string;
} | null>;

export type Collection = {
  buyer: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  createdAt: string;
  id: string;
  materials: Array<{
    createdAt: string;
    id: string;
    material: {
      carbonFactor: string;
      createdAt: string;
      gwCode: string;
      id: string;
      name: string;
      updatedAt: string;
      value: number;
    };
    updatedAt: string;
    weight: number;
  }>;
  seller: {
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  };
  updatedAt: string;
};

export type Collections = Array<{
  buyer: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  createdAt: string;
  id: string;
  materials: Array<{
    createdAt: string;
    id: string;
    material: {
      carbonFactor: string;
      createdAt: string;
      gwCode: string;
      id: string;
      name: string;
      updatedAt: string;
      value: number;
    };
    updatedAt: string;
    weight: number;
  }>;
  seller: {
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  };
  updatedAt: string;
}>;

export type CreateAddress = {
  city: string;
  country: string;
  lineOne: string;
  lineTwo?: string | null;
  province: string;
  zipCode: string;
};

export type CreateBankDetail = {
  accountHolder: string;
  accountNumber: string;
  bankName: string;
  branchName: string;
};

export type CreateCollection = {
  buyerId: string;
  sellerId: string;
};

export type CreateCollectionMaterial = {
  collectionId: string;
  materialId: string;
  value: number;
  weight: number;
};

export type CreateMaterial = {
  carbonFactor: number;
  gwCode: string;
  name: string;
};

export type CreateOrganization = {
  name: string;
  roles?: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  users?: Array<{
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  }>;
};

export type CreateRole = {
  description?: string | null;
  name: string;
  permissions: Array<string>;
};

export type CreateTransaction = {
  buyerId: string;
  sellerId: string;
};

export type CreateTransactionMaterial = {
  materialId: string;
  transactionId: string;
  value: number;
  weight: number;
};

export type CreateUser = {
  email: string;
  name: string;
  password: string;
  phone: string;
  roles: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  type: 'standard' | 'collector' | 'business' | 'system';
};

export type ErrorResponse = {
  error?: string;
  message?: string;
};

export type LoginPayload = {
  emailOrPhone: string;
  password: string;
};

export type Material = {
  carbonFactor: string;
  createdAt: string;
  gwCode: string;
  id: string;
  name: string;
  updatedAt: string;
  value: number;
};

export type Materials = Array<{
  carbonFactor: string;
  createdAt: string;
  gwCode: string;
  id: string;
  name: string;
  updatedAt: string;
  value: number;
}>;

export type MfaVerifyPayload = {
  code?: string;
};

export type Organization = {
  address: {
    city: string;
    country: string;
    createdAt: string;
    id: string;
    lineOne: string;
    lineTwo: string | null;
    province: string;
    updatedAt: string;
    zipCode: string;
  } | null;
  bankDetails: {
    accountHolder: string;
    accountNumber: string;
    bankName: string;
    branchName: string;
    createdAt: string;
    id: string;
    updatedAt: string;
  } | null;
  createdAt: string;
  id: string;
  name: string;
  updatedAt: string;
};

export type Organizations = Array<{
  address: {
    city: string;
    country: string;
    createdAt: string;
    id: string;
    lineOne: string;
    lineTwo: string | null;
    province: string;
    updatedAt: string;
    zipCode: string;
  } | null;
  bankDetails: {
    accountHolder: string;
    accountNumber: string;
    bankName: string;
    branchName: string;
    createdAt: string;
    id: string;
    updatedAt: string;
  } | null;
  createdAt: string;
  id: string;
  name: string;
  updatedAt: string;
}>;

export type Role = {
  createdAt: string;
  description: string | null;
  id: string;
  name: string;
  permissions: Array<string>;
  updatedAt: string;
};

export type Roles = Array<{
  createdAt: string;
  description: string | null;
  id: string;
  name: string;
  permissions: Array<string>;
  updatedAt: string;
}>;

export type SignUpPayload = {
  email?: string;
  name: string;
  password: string;
  phone?: string;
};

export type SuccessResponse = {
  item?:
    | {
        activeOrganization: string;
        address: {
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null;
        banReason: string | null;
        bankDetails: {
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null;
        banned: boolean;
        createdAt: string;
        email: string;
        id: string;
        mfaEnabled: boolean;
        mfaVerified: boolean;
        name: string;
        phone: string;
        roles: Array<{
          createdAt: string;
          description: string | null;
          id: string;
          name: string;
          permissions: Array<string>;
          updatedAt: string;
        }>;
        type: 'standard' | 'collector' | 'business' | 'system';
        updatedAt: string;
      }
    | {
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }
    | {
        address: {
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null;
        bankDetails: {
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null;
        createdAt: string;
        id: string;
        name: string;
        updatedAt: string;
      }
    | ({
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null)
    | ({
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null)
    | {
        carbonFactor: string;
        createdAt: string;
        gwCode: string;
        id: string;
        name: string;
        updatedAt: string;
        value: number;
      }
    | {
        buyer: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        createdAt: string;
        id: string;
        materials: Array<{
          createdAt: string;
          id: string;
          material: {
            carbonFactor: string;
            createdAt: string;
            gwCode: string;
            id: string;
            name: string;
            updatedAt: string;
            value: number;
          };
          updatedAt: string;
          weight: number;
        }>;
        seller: {
          activeOrganization: string;
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          banReason: string | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          banned: boolean;
          createdAt: string;
          email: string;
          id: string;
          mfaEnabled: boolean;
          mfaVerified: boolean;
          name: string;
          phone: string;
          roles: Array<{
            createdAt: string;
            description: string | null;
            id: string;
            name: string;
            permissions: Array<string>;
            updatedAt: string;
          }>;
          type: 'standard' | 'collector' | 'business' | 'system';
          updatedAt: string;
        };
        updatedAt: string;
      }
    | {
        buyer: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        createdAt: string;
        id: string;
        materials: Array<{
          createdAt: string;
          id: string;
          material: {
            carbonFactor: string;
            createdAt: string;
            gwCode: string;
            id: string;
            name: string;
            updatedAt: string;
            value: number;
          };
          updatedAt: string;
          value?: number;
          weight: number;
        }>;
        seller: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        updatedAt: string;
      };
  items?:
    | Array<{
        activeOrganization: string;
        address: {
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null;
        banReason: string | null;
        bankDetails: {
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null;
        banned: boolean;
        createdAt: string;
        email: string;
        id: string;
        mfaEnabled: boolean;
        mfaVerified: boolean;
        name: string;
        phone: string;
        roles: Array<{
          createdAt: string;
          description: string | null;
          id: string;
          name: string;
          permissions: Array<string>;
          updatedAt: string;
        }>;
        type: 'standard' | 'collector' | 'business' | 'system';
        updatedAt: string;
      }>
    | Array<{
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }>
    | Array<{
        address: {
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null;
        bankDetails: {
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null;
        createdAt: string;
        id: string;
        name: string;
        updatedAt: string;
      }>
    | Array<{
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null>
    | Array<{
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null>
    | Array<{
        carbonFactor: string;
        createdAt: string;
        gwCode: string;
        id: string;
        name: string;
        updatedAt: string;
        value: number;
      }>
    | Array<{
        buyer: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        createdAt: string;
        id: string;
        materials: Array<{
          createdAt: string;
          id: string;
          material: {
            carbonFactor: string;
            createdAt: string;
            gwCode: string;
            id: string;
            name: string;
            updatedAt: string;
            value: number;
          };
          updatedAt: string;
          weight: number;
        }>;
        seller: {
          activeOrganization: string;
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          banReason: string | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          banned: boolean;
          createdAt: string;
          email: string;
          id: string;
          mfaEnabled: boolean;
          mfaVerified: boolean;
          name: string;
          phone: string;
          roles: Array<{
            createdAt: string;
            description: string | null;
            id: string;
            name: string;
            permissions: Array<string>;
            updatedAt: string;
          }>;
          type: 'standard' | 'collector' | 'business' | 'system';
          updatedAt: string;
        };
        updatedAt: string;
      }>
    | Array<{
        buyer: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        createdAt: string;
        id: string;
        materials: Array<{
          createdAt: string;
          id: string;
          material: {
            carbonFactor: string;
            createdAt: string;
            gwCode: string;
            id: string;
            name: string;
            updatedAt: string;
            value: number;
          };
          updatedAt: string;
          value?: number;
          weight: number;
        }>;
        seller: {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        };
        updatedAt: string;
      }>;
  pageDetails?: {
    count?: number;
    currentPage?: number;
    nextPage?: number;
    pages?: number;
    previousPage?: number;
  } | null;
};

export type Transaction = {
  buyer: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  createdAt: string;
  id: string;
  materials: Array<{
    createdAt: string;
    id: string;
    material: {
      carbonFactor: string;
      createdAt: string;
      gwCode: string;
      id: string;
      name: string;
      updatedAt: string;
      value: number;
    };
    updatedAt: string;
    value?: number;
    weight: number;
  }>;
  seller: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  updatedAt: string;
};

export type Transactions = Array<{
  buyer: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  createdAt: string;
  id: string;
  materials: Array<{
    createdAt: string;
    id: string;
    material: {
      carbonFactor: string;
      createdAt: string;
      gwCode: string;
      id: string;
      name: string;
      updatedAt: string;
      value: number;
    };
    updatedAt: string;
    value?: number;
    weight: number;
  }>;
  seller: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
  updatedAt: string;
}>;

export type UpdateAddress = {
  city?: string | null;
  country?: string | null;
  lineOne?: string | null;
  lineTwo?: string | null;
  province?: string | null;
  zipCode?: string | null;
};

export type UpdateBankDetail = {
  accountHolder?: string | null;
  accountNumber?: string | null;
  bankName?: string | null;
  branchName?: string | null;
};

export type UpdateCollection = {
  buyerId?: string | null;
  sellerId?: string | null;
};

export type UpdateCollectionMaterial = {
  collectionId?: string | null;
  materialId?: string | null;
  value?: number | null;
  weight?: number | null;
};

export type UpdateMaterial = {
  carbonFactor?: number;
  gwCode?: string;
  name?: string;
};

export type UpdateOrganization = {
  name?: string | null;
  roles?: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  users?: Array<{
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  }>;
};

export type UpdateRole = {
  description?: string | null;
  name?: string | null;
  permissions?: Array<string> | null;
};

export type UpdateTransaction = {
  buyerId?: string | null;
  sellerId?: string | null;
};

export type UpdateTransactionMaterial = {
  materialId?: string | null;
  transactionId?: string | null;
  value?: number | null;
  weight?: number | null;
};

export type UpdateUser = {
  email?: string | null;
  name?: string | null;
  password?: string | null;
  phone?: string | null;
  roles?: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  type?: 'standard' | 'collector' | 'business' | 'system';
};

export type User = {
  activeOrganization: string;
  address: {
    city: string;
    country: string;
    createdAt: string;
    id: string;
    lineOne: string;
    lineTwo: string | null;
    province: string;
    updatedAt: string;
    zipCode: string;
  } | null;
  banReason: string | null;
  bankDetails: {
    accountHolder: string;
    accountNumber: string;
    bankName: string;
    branchName: string;
    createdAt: string;
    id: string;
    updatedAt: string;
  } | null;
  banned: boolean;
  createdAt: string;
  email: string;
  id: string;
  mfaEnabled: boolean;
  mfaVerified: boolean;
  name: string;
  phone: string;
  roles: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  type: 'standard' | 'collector' | 'business' | 'system';
  updatedAt: string;
};

export type Users = Array<{
  activeOrganization: string;
  address: {
    city: string;
    country: string;
    createdAt: string;
    id: string;
    lineOne: string;
    lineTwo: string | null;
    province: string;
    updatedAt: string;
    zipCode: string;
  } | null;
  banReason: string | null;
  bankDetails: {
    accountHolder: string;
    accountNumber: string;
    bankName: string;
    branchName: string;
    createdAt: string;
    id: string;
    updatedAt: string;
  } | null;
  banned: boolean;
  createdAt: string;
  email: string;
  id: string;
  mfaEnabled: boolean;
  mfaVerified: boolean;
  name: string;
  phone: string;
  roles: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
  type: 'standard' | 'collector' | 'business' | 'system';
  updatedAt: string;
}>;

export type GetApiAuthenticationCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/authentication/check';
};

export type GetApiAuthenticationCheckErrors = {
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiAuthenticationCheckError =
  GetApiAuthenticationCheckErrors[keyof GetApiAuthenticationCheckErrors];

export type GetApiAuthenticationCheckResponses = {
  /**
   * Successful authentication check.
   */
  200: {
    item?:
      | {
          activeOrganization: string;
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          banReason: string | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          banned: boolean;
          createdAt: string;
          email: string;
          id: string;
          mfaEnabled: boolean;
          mfaVerified: boolean;
          name: string;
          phone: string;
          roles: Array<{
            createdAt: string;
            description: string | null;
            id: string;
            name: string;
            permissions: Array<string>;
            updatedAt: string;
          }>;
          type: 'standard' | 'collector' | 'business' | 'system';
          updatedAt: string;
        }
      | {
          createdAt: string;
          description: string | null;
          id: string;
          name: string;
          permissions: Array<string>;
          updatedAt: string;
        }
      | {
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        }
      | ({
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null)
      | ({
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null)
      | {
          carbonFactor: string;
          createdAt: string;
          gwCode: string;
          id: string;
          name: string;
          updatedAt: string;
          value: number;
        }
      | {
          buyer: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          createdAt: string;
          id: string;
          materials: Array<{
            createdAt: string;
            id: string;
            material: {
              carbonFactor: string;
              createdAt: string;
              gwCode: string;
              id: string;
              name: string;
              updatedAt: string;
              value: number;
            };
            updatedAt: string;
            weight: number;
          }>;
          seller: {
            activeOrganization: string;
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            banReason: string | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            banned: boolean;
            createdAt: string;
            email: string;
            id: string;
            mfaEnabled: boolean;
            mfaVerified: boolean;
            name: string;
            phone: string;
            roles: Array<{
              createdAt: string;
              description: string | null;
              id: string;
              name: string;
              permissions: Array<string>;
              updatedAt: string;
            }>;
            type: 'standard' | 'collector' | 'business' | 'system';
            updatedAt: string;
          };
          updatedAt: string;
        }
      | {
          buyer: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          createdAt: string;
          id: string;
          materials: Array<{
            createdAt: string;
            id: string;
            material: {
              carbonFactor: string;
              createdAt: string;
              gwCode: string;
              id: string;
              name: string;
              updatedAt: string;
              value: number;
            };
            updatedAt: string;
            value?: number;
            weight: number;
          }>;
          seller: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          updatedAt: string;
        };
    items?:
      | Array<{
          activeOrganization: string;
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          banReason: string | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          banned: boolean;
          createdAt: string;
          email: string;
          id: string;
          mfaEnabled: boolean;
          mfaVerified: boolean;
          name: string;
          phone: string;
          roles: Array<{
            createdAt: string;
            description: string | null;
            id: string;
            name: string;
            permissions: Array<string>;
            updatedAt: string;
          }>;
          type: 'standard' | 'collector' | 'business' | 'system';
          updatedAt: string;
        }>
      | Array<{
          createdAt: string;
          description: string | null;
          id: string;
          name: string;
          permissions: Array<string>;
          updatedAt: string;
        }>
      | Array<{
          address: {
            city: string;
            country: string;
            createdAt: string;
            id: string;
            lineOne: string;
            lineTwo: string | null;
            province: string;
            updatedAt: string;
            zipCode: string;
          } | null;
          bankDetails: {
            accountHolder: string;
            accountNumber: string;
            bankName: string;
            branchName: string;
            createdAt: string;
            id: string;
            updatedAt: string;
          } | null;
          createdAt: string;
          id: string;
          name: string;
          updatedAt: string;
        }>
      | Array<{
          city: string;
          country: string;
          createdAt: string;
          id: string;
          lineOne: string;
          lineTwo: string | null;
          province: string;
          updatedAt: string;
          zipCode: string;
        } | null>
      | Array<{
          accountHolder: string;
          accountNumber: string;
          bankName: string;
          branchName: string;
          createdAt: string;
          id: string;
          updatedAt: string;
        } | null>
      | Array<{
          carbonFactor: string;
          createdAt: string;
          gwCode: string;
          id: string;
          name: string;
          updatedAt: string;
          value: number;
        }>
      | Array<{
          buyer: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          createdAt: string;
          id: string;
          materials: Array<{
            createdAt: string;
            id: string;
            material: {
              carbonFactor: string;
              createdAt: string;
              gwCode: string;
              id: string;
              name: string;
              updatedAt: string;
              value: number;
            };
            updatedAt: string;
            weight: number;
          }>;
          seller: {
            activeOrganization: string;
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            banReason: string | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            banned: boolean;
            createdAt: string;
            email: string;
            id: string;
            mfaEnabled: boolean;
            mfaVerified: boolean;
            name: string;
            phone: string;
            roles: Array<{
              createdAt: string;
              description: string | null;
              id: string;
              name: string;
              permissions: Array<string>;
              updatedAt: string;
            }>;
            type: 'standard' | 'collector' | 'business' | 'system';
            updatedAt: string;
          };
          updatedAt: string;
        }>
      | Array<{
          buyer: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          createdAt: string;
          id: string;
          materials: Array<{
            createdAt: string;
            id: string;
            material: {
              carbonFactor: string;
              createdAt: string;
              gwCode: string;
              id: string;
              name: string;
              updatedAt: string;
              value: number;
            };
            updatedAt: string;
            value?: number;
            weight: number;
          }>;
          seller: {
            address: {
              city: string;
              country: string;
              createdAt: string;
              id: string;
              lineOne: string;
              lineTwo: string | null;
              province: string;
              updatedAt: string;
              zipCode: string;
            } | null;
            bankDetails: {
              accountHolder: string;
              accountNumber: string;
              bankName: string;
              branchName: string;
              createdAt: string;
              id: string;
              updatedAt: string;
            } | null;
            createdAt: string;
            id: string;
            name: string;
            updatedAt: string;
          };
          updatedAt: string;
        }>;
    pageDetails?: {
      count?: number;
      currentPage?: number;
      nextPage?: number;
      pages?: number;
      previousPage?: number;
    } | null;
  };
};

export type GetApiAuthenticationCheckResponse =
  GetApiAuthenticationCheckResponses[keyof GetApiAuthenticationCheckResponses];

export type PostApiAuthenticationLoginData = {
  body: {
    emailOrPhone: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: '/api/authentication/login';
};

export type PostApiAuthenticationLoginErrors = {
  /**
   * Invalid request.
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized.
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal Server Error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiAuthenticationLoginError =
  PostApiAuthenticationLoginErrors[keyof PostApiAuthenticationLoginErrors];

export type PostApiAuthenticationLoginResponses = {
  /**
   * The user has been successfully logged in.
   */
  200: unknown;
};

export type PostApiAuthenticationLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/authentication/logout';
};

export type PostApiAuthenticationLogoutErrors = {
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiAuthenticationLogoutError =
  PostApiAuthenticationLogoutErrors[keyof PostApiAuthenticationLogoutErrors];

export type PostApiAuthenticationLogoutResponses = {
  /**
   * Successful logout.
   */
  200: unknown;
};

export type GetApiAuthenticationMfaEnableData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/authentication/mfa/enable';
};

export type GetApiAuthenticationMfaEnableErrors = {
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiAuthenticationMfaEnableError =
  GetApiAuthenticationMfaEnableErrors[keyof GetApiAuthenticationMfaEnableErrors];

export type GetApiAuthenticationMfaEnableResponses = {
  /**
   * The MFA QR code has been successfully generated and returned.
   */
  200: unknown;
};

export type PostApiAuthenticationMfaVerifyData = {
  body: {
    code?: string;
  };
  path?: never;
  query?: never;
  url: '/api/authentication/mfa/verify';
};

export type PostApiAuthenticationMfaVerifyErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiAuthenticationMfaVerifyError =
  PostApiAuthenticationMfaVerifyErrors[keyof PostApiAuthenticationMfaVerifyErrors];

export type PostApiAuthenticationMfaVerifyResponses = {
  /**
   * MFA verification successful.
   */
  200: unknown;
};

export type GetApiCollectionsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number for pagination. Defaults to 1.
     */
    page: number;
    /**
     * Number of items per page. Defaults to 10.
     */
    limit: number;
    /**
     * Search term for filtering collections.
     */
    search: string;
  };
  url: '/api/collections';
};

export type GetApiCollectionsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiCollectionsError =
  GetApiCollectionsErrors[keyof GetApiCollectionsErrors];

export type GetApiCollectionsResponses = {
  /**
   * Successful collections retrieval.
   */
  200: Array<{
    buyer: {
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      createdAt: string;
      id: string;
      name: string;
      updatedAt: string;
    };
    createdAt: string;
    id: string;
    materials: Array<{
      createdAt: string;
      id: string;
      material: {
        carbonFactor: string;
        createdAt: string;
        gwCode: string;
        id: string;
        name: string;
        updatedAt: string;
        value: number;
      };
      updatedAt: string;
      weight: number;
    }>;
    seller: {
      activeOrganization: string;
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      banReason: string | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      banned: boolean;
      createdAt: string;
      email: string;
      id: string;
      mfaEnabled: boolean;
      mfaVerified: boolean;
      name: string;
      phone: string;
      roles: Array<{
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }>;
      type: 'standard' | 'collector' | 'business' | 'system';
      updatedAt: string;
    };
    updatedAt: string;
  }>;
};

export type GetApiCollectionsResponse =
  GetApiCollectionsResponses[keyof GetApiCollectionsResponses];

export type PostApiCollectionsData = {
  /**
   * Payload to create a new collection.
   */
  body: {
    buyerId: string;
    sellerId: string;
  };
  path?: never;
  query?: never;
  url: '/api/collections';
};

export type PostApiCollectionsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiCollectionsError =
  PostApiCollectionsErrors[keyof PostApiCollectionsErrors];

export type PostApiCollectionsResponses = {
  /**
   * Successful collection creation.
   */
  200: string;
};

export type PostApiCollectionsResponse =
  PostApiCollectionsResponses[keyof PostApiCollectionsResponses];

export type DeleteApiCollectionsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collections/{id}';
};

export type DeleteApiCollectionsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type DeleteApiCollectionsByIdError =
  DeleteApiCollectionsByIdErrors[keyof DeleteApiCollectionsByIdErrors];

export type DeleteApiCollectionsByIdResponses = {
  /**
   * Successful collection deletion.
   */
  200: string;
};

export type DeleteApiCollectionsByIdResponse =
  DeleteApiCollectionsByIdResponses[keyof DeleteApiCollectionsByIdResponses];

export type GetApiCollectionsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collections/{id}';
};

export type GetApiCollectionsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiCollectionsByIdError =
  GetApiCollectionsByIdErrors[keyof GetApiCollectionsByIdErrors];

export type GetApiCollectionsByIdResponses = {
  /**
   * Successful collection retrieval.
   */
  200: {
    buyer: {
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      createdAt: string;
      id: string;
      name: string;
      updatedAt: string;
    };
    createdAt: string;
    id: string;
    materials: Array<{
      createdAt: string;
      id: string;
      material: {
        carbonFactor: string;
        createdAt: string;
        gwCode: string;
        id: string;
        name: string;
        updatedAt: string;
        value: number;
      };
      updatedAt: string;
      weight: number;
    }>;
    seller: {
      activeOrganization: string;
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      banReason: string | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      banned: boolean;
      createdAt: string;
      email: string;
      id: string;
      mfaEnabled: boolean;
      mfaVerified: boolean;
      name: string;
      phone: string;
      roles: Array<{
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }>;
      type: 'standard' | 'collector' | 'business' | 'system';
      updatedAt: string;
    };
    updatedAt: string;
  };
};

export type GetApiCollectionsByIdResponse =
  GetApiCollectionsByIdResponses[keyof GetApiCollectionsByIdResponses];

export type PatchApiCollectionsByIdData = {
  /**
   * Payload to update an existing collection.
   */
  body: {
    buyerId?: string | null;
    sellerId?: string | null;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/collections/{id}';
};

export type PatchApiCollectionsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PatchApiCollectionsByIdError =
  PatchApiCollectionsByIdErrors[keyof PatchApiCollectionsByIdErrors];

export type PatchApiCollectionsByIdResponses = {
  /**
   * Successful collection update.
   */
  200: string;
};

export type PatchApiCollectionsByIdResponse =
  PatchApiCollectionsByIdResponses[keyof PatchApiCollectionsByIdResponses];

export type GetApiMaterialsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number for pagination. Defaults to 1.
     */
    page: number;
    /**
     * Number of items per page. Defaults to 10.
     */
    limit: number;
    /**
     * Search term for filtering materials.
     */
    search: string;
  };
  url: '/api/materials';
};

export type GetApiMaterialsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiMaterialsError =
  GetApiMaterialsErrors[keyof GetApiMaterialsErrors];

export type GetApiMaterialsResponses = {
  /**
   * Successful materials retrieval.
   */
  200: Array<{
    carbonFactor: string;
    createdAt: string;
    gwCode: string;
    id: string;
    name: string;
    updatedAt: string;
    value: number;
  }>;
};

export type GetApiMaterialsResponse =
  GetApiMaterialsResponses[keyof GetApiMaterialsResponses];

export type PostApiMaterialsData = {
  /**
   * Payload to create a new material.
   */
  body: {
    carbonFactor: number;
    gwCode: string;
    name: string;
  };
  path?: never;
  query?: never;
  url: '/api/materials';
};

export type PostApiMaterialsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiMaterialsError =
  PostApiMaterialsErrors[keyof PostApiMaterialsErrors];

export type PostApiMaterialsResponses = {
  /**
   * Successful material creation.
   */
  200: string;
};

export type PostApiMaterialsResponse =
  PostApiMaterialsResponses[keyof PostApiMaterialsResponses];

export type DeleteApiMaterialsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type DeleteApiMaterialsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type DeleteApiMaterialsByIdError =
  DeleteApiMaterialsByIdErrors[keyof DeleteApiMaterialsByIdErrors];

export type DeleteApiMaterialsByIdResponses = {
  /**
   * Successful material deletion.
   */
  200: string;
};

export type DeleteApiMaterialsByIdResponse =
  DeleteApiMaterialsByIdResponses[keyof DeleteApiMaterialsByIdResponses];

export type GetApiMaterialsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type GetApiMaterialsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiMaterialsByIdError =
  GetApiMaterialsByIdErrors[keyof GetApiMaterialsByIdErrors];

export type GetApiMaterialsByIdResponses = {
  /**
   * Successful material retrieval.
   */
  200: {
    carbonFactor: string;
    createdAt: string;
    gwCode: string;
    id: string;
    name: string;
    updatedAt: string;
    value: number;
  };
};

export type GetApiMaterialsByIdResponse =
  GetApiMaterialsByIdResponses[keyof GetApiMaterialsByIdResponses];

export type PatchApiMaterialsByIdData = {
  /**
   * Payload to update an existing material.
   */
  body: {
    carbonFactor?: number;
    gwCode?: string;
    name?: string;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/materials/{id}';
};

export type PatchApiMaterialsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PatchApiMaterialsByIdError =
  PatchApiMaterialsByIdErrors[keyof PatchApiMaterialsByIdErrors];

export type PatchApiMaterialsByIdResponses = {
  /**
   * Successful material update.
   */
  200: string;
};

export type PatchApiMaterialsByIdResponse =
  PatchApiMaterialsByIdResponses[keyof PatchApiMaterialsByIdResponses];

export type GetApiOrganizationsData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number for pagination. Defaults to 1.
     */
    page: number;
    /**
     * Number of items per page. Defaults to 10.
     */
    limit: number;
    /**
     * Search term for filtering organizations.
     */
    search: string;
  };
  url: '/api/organizations';
};

export type GetApiOrganizationsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiOrganizationsError =
  GetApiOrganizationsErrors[keyof GetApiOrganizationsErrors];

export type GetApiOrganizationsResponses = {
  /**
   * Successful organizations retrieval.
   */
  200: Array<{
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  }>;
};

export type GetApiOrganizationsResponse =
  GetApiOrganizationsResponses[keyof GetApiOrganizationsResponses];

export type PostApiOrganizationsData = {
  /**
   * Payload to create a new organization.
   */
  body: {
    name: string;
    roles?: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    users?: Array<{
      activeOrganization: string;
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      banReason: string | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      banned: boolean;
      createdAt: string;
      email: string;
      id: string;
      mfaEnabled: boolean;
      mfaVerified: boolean;
      name: string;
      phone: string;
      roles: Array<{
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }>;
      type: 'standard' | 'collector' | 'business' | 'system';
      updatedAt: string;
    }>;
  };
  path?: never;
  query?: never;
  url: '/api/organizations';
};

export type PostApiOrganizationsErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiOrganizationsError =
  PostApiOrganizationsErrors[keyof PostApiOrganizationsErrors];

export type PostApiOrganizationsResponses = {
  /**
   * Successful organization creation.
   */
  200: string;
};

export type PostApiOrganizationsResponse =
  PostApiOrganizationsResponses[keyof PostApiOrganizationsResponses];

export type DeleteApiOrganizationsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/organizations/{id}';
};

export type DeleteApiOrganizationsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type DeleteApiOrganizationsByIdError =
  DeleteApiOrganizationsByIdErrors[keyof DeleteApiOrganizationsByIdErrors];

export type DeleteApiOrganizationsByIdResponses = {
  /**
   * Successful organization deletion.
   */
  200: string;
};

export type DeleteApiOrganizationsByIdResponse =
  DeleteApiOrganizationsByIdResponses[keyof DeleteApiOrganizationsByIdResponses];

export type GetApiOrganizationsByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/organizations/{id}';
};

export type GetApiOrganizationsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiOrganizationsByIdError =
  GetApiOrganizationsByIdErrors[keyof GetApiOrganizationsByIdErrors];

export type GetApiOrganizationsByIdResponses = {
  /**
   * Successful organization retrieval.
   */
  200: {
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    createdAt: string;
    id: string;
    name: string;
    updatedAt: string;
  };
};

export type GetApiOrganizationsByIdResponse =
  GetApiOrganizationsByIdResponses[keyof GetApiOrganizationsByIdResponses];

export type PatchApiOrganizationsByIdData = {
  /**
   * Payload to update an existing organization.
   */
  body: {
    name?: string | null;
    roles?: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    users?: Array<{
      activeOrganization: string;
      address: {
        city: string;
        country: string;
        createdAt: string;
        id: string;
        lineOne: string;
        lineTwo: string | null;
        province: string;
        updatedAt: string;
        zipCode: string;
      } | null;
      banReason: string | null;
      bankDetails: {
        accountHolder: string;
        accountNumber: string;
        bankName: string;
        branchName: string;
        createdAt: string;
        id: string;
        updatedAt: string;
      } | null;
      banned: boolean;
      createdAt: string;
      email: string;
      id: string;
      mfaEnabled: boolean;
      mfaVerified: boolean;
      name: string;
      phone: string;
      roles: Array<{
        createdAt: string;
        description: string | null;
        id: string;
        name: string;
        permissions: Array<string>;
        updatedAt: string;
      }>;
      type: 'standard' | 'collector' | 'business' | 'system';
      updatedAt: string;
    }>;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/organizations/{id}';
};

export type PatchApiOrganizationsByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PatchApiOrganizationsByIdError =
  PatchApiOrganizationsByIdErrors[keyof PatchApiOrganizationsByIdErrors];

export type PatchApiOrganizationsByIdResponses = {
  /**
   * Successful organization update.
   */
  200: string;
};

export type PatchApiOrganizationsByIdResponse =
  PatchApiOrganizationsByIdResponses[keyof PatchApiOrganizationsByIdResponses];

export type GetApiRolesData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number for pagination. Defaults to 1.
     */
    page: number;
    /**
     * Number of items per page. Defaults to 10.
     */
    limit: number;
    /**
     * Search term for filtering roles.
     */
    search: string;
  };
  url: '/api/roles';
};

export type GetApiRolesErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiRolesError = GetApiRolesErrors[keyof GetApiRolesErrors];

export type GetApiRolesResponses = {
  /**
   * Successful roles retrieval.
   */
  200: Array<{
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  }>;
};

export type GetApiRolesResponse =
  GetApiRolesResponses[keyof GetApiRolesResponses];

export type PostApiRolesData = {
  /**
   * Payload to create a new role.
   */
  body: {
    description?: string | null;
    name: string;
    permissions: Array<string>;
  };
  path?: never;
  query?: never;
  url: '/api/roles';
};

export type PostApiRolesErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiRolesError = PostApiRolesErrors[keyof PostApiRolesErrors];

export type PostApiRolesResponses = {
  /**
   * Successful role creation.
   */
  200: string;
};

export type PostApiRolesResponse =
  PostApiRolesResponses[keyof PostApiRolesResponses];

export type DeleteApiRolesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/roles/{id}';
};

export type DeleteApiRolesByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type DeleteApiRolesByIdError =
  DeleteApiRolesByIdErrors[keyof DeleteApiRolesByIdErrors];

export type DeleteApiRolesByIdResponses = {
  /**
   * Successful role deletion.
   */
  200: string;
};

export type DeleteApiRolesByIdResponse =
  DeleteApiRolesByIdResponses[keyof DeleteApiRolesByIdResponses];

export type GetApiRolesByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/roles/{id}';
};

export type GetApiRolesByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiRolesByIdError =
  GetApiRolesByIdErrors[keyof GetApiRolesByIdErrors];

export type GetApiRolesByIdResponses = {
  /**
   * Successful role retrieval.
   */
  200: {
    createdAt: string;
    description: string | null;
    id: string;
    name: string;
    permissions: Array<string>;
    updatedAt: string;
  };
};

export type GetApiRolesByIdResponse =
  GetApiRolesByIdResponses[keyof GetApiRolesByIdResponses];

export type PatchApiRolesByIdData = {
  /**
   * Payload to update an existing role.
   */
  body: {
    description?: string | null;
    name?: string | null;
    permissions?: Array<string> | null;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/roles/{id}';
};

export type PatchApiRolesByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PatchApiRolesByIdError =
  PatchApiRolesByIdErrors[keyof PatchApiRolesByIdErrors];

export type PatchApiRolesByIdResponses = {
  /**
   * Successful role update.
   */
  200: string;
};

export type PatchApiRolesByIdResponse =
  PatchApiRolesByIdResponses[keyof PatchApiRolesByIdResponses];

export type GetApiUsersData = {
  body?: never;
  path?: never;
  query: {
    /**
     * Page number for pagination. Defaults to 1.
     */
    page: number;
    /**
     * Number of items per page. Defaults to 10.
     */
    limit: number;
    /**
     * Search term for filtering users.
     */
    search: string;
    /**
     * Type of user to filter by.
     */
    type: string;
  };
  url: '/api/users';
};

export type GetApiUsersErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiUsersError = GetApiUsersErrors[keyof GetApiUsersErrors];

export type GetApiUsersResponses = {
  /**
   * Successful users retrieval.
   */
  200: {
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  };
};

export type GetApiUsersResponse =
  GetApiUsersResponses[keyof GetApiUsersResponses];

export type PostApiUsersData = {
  /**
   * Payload to create a new user.
   */
  body: {
    email: string;
    name: string;
    password: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
  };
  path?: never;
  query?: never;
  url: '/api/users';
};

export type PostApiUsersErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PostApiUsersError = PostApiUsersErrors[keyof PostApiUsersErrors];

export type PostApiUsersResponses = {
  /**
   * Successful user creation.
   */
  200: string;
};

export type PostApiUsersResponse =
  PostApiUsersResponses[keyof PostApiUsersResponses];

export type DeleteApiUsersByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/users/{id}';
};

export type DeleteApiUsersByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type DeleteApiUsersByIdError =
  DeleteApiUsersByIdErrors[keyof DeleteApiUsersByIdErrors];

export type DeleteApiUsersByIdResponses = {
  /**
   * Successful user deletion.
   */
  200: string;
};

export type DeleteApiUsersByIdResponse =
  DeleteApiUsersByIdResponses[keyof DeleteApiUsersByIdResponses];

export type GetApiUsersByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/users/{id}';
};

export type GetApiUsersByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type GetApiUsersByIdError =
  GetApiUsersByIdErrors[keyof GetApiUsersByIdErrors];

export type GetApiUsersByIdResponses = {
  /**
   * Successful user retrieval.
   */
  200: {
    activeOrganization: string;
    address: {
      city: string;
      country: string;
      createdAt: string;
      id: string;
      lineOne: string;
      lineTwo: string | null;
      province: string;
      updatedAt: string;
      zipCode: string;
    } | null;
    banReason: string | null;
    bankDetails: {
      accountHolder: string;
      accountNumber: string;
      bankName: string;
      branchName: string;
      createdAt: string;
      id: string;
      updatedAt: string;
    } | null;
    banned: boolean;
    createdAt: string;
    email: string;
    id: string;
    mfaEnabled: boolean;
    mfaVerified: boolean;
    name: string;
    phone: string;
    roles: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type: 'standard' | 'collector' | 'business' | 'system';
    updatedAt: string;
  };
};

export type GetApiUsersByIdResponse =
  GetApiUsersByIdResponses[keyof GetApiUsersByIdResponses];

export type PatchApiUsersByIdData = {
  /**
   * Payload to update an existing user.
   */
  body: {
    email?: string | null;
    name?: string | null;
    password?: string | null;
    phone?: string | null;
    roles?: Array<{
      createdAt: string;
      description: string | null;
      id: string;
      name: string;
      permissions: Array<string>;
      updatedAt: string;
    }>;
    type?: 'standard' | 'collector' | 'business' | 'system';
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/users/{id}';
};

export type PatchApiUsersByIdErrors = {
  /**
   * Bad Request
   */
  400: {
    error?: string;
    message?: string;
  };
  /**
   * Unauthorized
   */
  401: {
    error?: string;
    message?: string;
  };
  /**
   * Internal server error.
   */
  500: {
    error?: string;
    message?: string;
  };
  default: unknown;
};

export type PatchApiUsersByIdError =
  PatchApiUsersByIdErrors[keyof PatchApiUsersByIdErrors];

export type PatchApiUsersByIdResponses = {
  /**
   * Successful user update.
   */
  200: string;
};

export type PatchApiUsersByIdResponse =
  PatchApiUsersByIdResponses[keyof PatchApiUsersByIdResponses];

export type ClientOptions = {
  baseUrl: 'http://localhost:6173' | 'https://3reco.co.za' | (string & {});
};
