// This file is auto-generated by @hey-api/openapi-ts
import { z } from 'zod';

export const zAddress = z.union([
  z.object({
    city: z.string(),
    country: z.string(),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    lineOne: z.string(),
    lineTwo: z.union([z.string(), z.null()]),
    province: z.string(),
    updatedAt: z.iso.datetime(),
    zipCode: z.string(),
  }),
  z.null(),
]);

export const zAddresses = z.array(
  z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ])
);

export const zBankDetail = z.union([
  z.object({
    accountHolder: z.string(),
    accountNumber: z.string(),
    bankName: z.string(),
    branchName: z.string(),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    updatedAt: z.iso.datetime(),
  }),
  z.null(),
]);

export const zBankDetails = z.array(
  z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ])
);

export const zCollection = z.object({
  buyer: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      material: z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      updatedAt: z.iso.datetime(),
      weight: z.number(),
    })
  ),
  seller: z.object({
    activeOrganization: z.uuid(),
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    banReason: z.union([z.string(), z.null()]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    banned: z.boolean(),
    createdAt: z.iso.datetime(),
    email: z.string(),
    id: z.uuid(),
    mfaEnabled: z.boolean(),
    mfaVerified: z.boolean(),
    name: z.string(),
    phone: z.string(),
    roles: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    ),
    type: z.enum(['standard', 'collector', 'business', 'system']),
    updatedAt: z.iso.datetime(),
  }),
  updatedAt: z.iso.datetime(),
});

export const zCollections = z.array(
  z.object({
    buyer: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    materials: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        material: z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        }),
        updatedAt: z.iso.datetime(),
        weight: z.number(),
      })
    ),
    seller: z.object({
      activeOrganization: z.uuid(),
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      banReason: z.union([z.string(), z.null()]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      banned: z.boolean(),
      createdAt: z.iso.datetime(),
      email: z.string(),
      id: z.uuid(),
      mfaEnabled: z.boolean(),
      mfaVerified: z.boolean(),
      name: z.string(),
      phone: z.string(),
      roles: z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      ),
      type: z.enum(['standard', 'collector', 'business', 'system']),
      updatedAt: z.iso.datetime(),
    }),
    updatedAt: z.iso.datetime(),
  })
);

export const zCreateAddress = z.object({
  city: z.string(),
  country: z.string(),
  lineOne: z.string(),
  lineTwo: z.optional(z.union([z.string(), z.null()])),
  province: z.string(),
  zipCode: z.string(),
});

export const zCreateBankDetail = z.object({
  accountHolder: z.string(),
  accountNumber: z.string(),
  bankName: z.string(),
  branchName: z.string(),
});

export const zCreateCollection = z.object({
  buyerId: z.uuid(),
  sellerId: z.uuid(),
});

export const zCreateCollectionMaterial = z.object({
  collectionId: z.uuid(),
  materialId: z.uuid(),
  value: z.number(),
  weight: z.number(),
});

export const zCreateMaterial = z.object({
  carbonFactor: z.number(),
  gwCode: z.string(),
  name: z.string(),
});

export const zCreateOrganization = z.object({
  name: z.string(),
  roles: z.optional(
    z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    )
  ),
  users: z.optional(
    z.array(
      z.object({
        activeOrganization: z.uuid(),
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        banReason: z.union([z.string(), z.null()]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        banned: z.boolean(),
        createdAt: z.iso.datetime(),
        email: z.string(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        phone: z.string(),
        roles: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            description: z.union([z.string(), z.null()]),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(z.string()),
            updatedAt: z.iso.datetime(),
          })
        ),
        type: z.enum(['standard', 'collector', 'business', 'system']),
        updatedAt: z.iso.datetime(),
      })
    )
  ),
});

export const zCreateRole = z.object({
  description: z.optional(z.union([z.string(), z.null()])),
  name: z.string(),
  permissions: z.array(z.string()),
});

export const zCreateTransaction = z.object({
  buyerId: z.uuid(),
  sellerId: z.uuid(),
});

export const zCreateTransactionMaterial = z.object({
  materialId: z.uuid(),
  transactionId: z.uuid(),
  value: z.number(),
  weight: z.number(),
});

export const zCreateUser = z.object({
  email: z.string(),
  name: z.string(),
  password: z.string(),
  phone: z.string(),
  roles: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      description: z.union([z.string(), z.null()]),
      id: z.uuid(),
      name: z.string(),
      permissions: z.array(z.string()),
      updatedAt: z.iso.datetime(),
    })
  ),
  type: z.enum(['standard', 'collector', 'business', 'system']),
});

export const zErrorResponse = z.object({
  error: z.optional(z.string()).default('Bad Request'),
  message: z
    .optional(z.string())
    .default(
      'The request could not be understood or was missing required parameters.'
    ),
});

export const zLoginPayload = z.object({
  emailOrPhone: z.email(),
  password: z.string().min(6).max(100),
});

export const zMaterial = z.object({
  carbonFactor: z.string(),
  createdAt: z.iso.datetime(),
  gwCode: z.string(),
  id: z.uuid(),
  name: z.string(),
  updatedAt: z.iso.datetime(),
  value: z.number(),
});

export const zMaterials = z.array(
  z.object({
    carbonFactor: z.string(),
    createdAt: z.iso.datetime(),
    gwCode: z.string(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
    value: z.number(),
  })
);

export const zMfaVerifyPayload = z.object({
  code: z.optional(z.string()),
});

export const zOrganization = z.object({
  address: z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ]),
  bankDetails: z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ]),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  name: z.string(),
  updatedAt: z.iso.datetime(),
});

export const zOrganizations = z.array(
  z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  })
);

export const zRole = z.object({
  createdAt: z.iso.datetime(),
  description: z.union([z.string(), z.null()]),
  id: z.uuid(),
  name: z.string(),
  permissions: z.array(z.string()),
  updatedAt: z.iso.datetime(),
});

export const zRoles = z.array(
  z.object({
    createdAt: z.iso.datetime(),
    description: z.union([z.string(), z.null()]),
    id: z.uuid(),
    name: z.string(),
    permissions: z.array(z.string()),
    updatedAt: z.iso.datetime(),
  })
);

export const zSignUpPayload = z.object({
  email: z.optional(z.email()),
  name: z.string().min(2).max(100),
  password: z.string().min(6).max(100),
  phone: z.optional(z.string().min(10).max(15)),
});

export const zSuccessResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        activeOrganization: z.uuid(),
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        banReason: z.union([z.string(), z.null()]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        banned: z.boolean(),
        createdAt: z.iso.datetime(),
        email: z.string(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        phone: z.string(),
        roles: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            description: z.union([z.string(), z.null()]),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(z.string()),
            updatedAt: z.iso.datetime(),
          })
        ),
        type: z.enum(['standard', 'collector', 'business', 'system']),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      z.object({
        buyer: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            material: z.object({
              carbonFactor: z.string(),
              createdAt: z.iso.datetime(),
              gwCode: z.string(),
              id: z.uuid(),
              name: z.string(),
              updatedAt: z.iso.datetime(),
              value: z.number(),
            }),
            updatedAt: z.iso.datetime(),
            weight: z.number(),
          })
        ),
        seller: z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        }),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            material: z.object({
              carbonFactor: z.string(),
              createdAt: z.iso.datetime(),
              gwCode: z.string(),
              id: z.uuid(),
              name: z.string(),
              updatedAt: z.iso.datetime(),
              value: z.number(),
            }),
            updatedAt: z.iso.datetime(),
            value: z.optional(z.number()),
            weight: z.number(),
          })
        ),
        seller: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        updatedAt: z.iso.datetime(),
      }),
    ])
  ),
  items: z.optional(
    z.union([
      z.array(
        z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ])
      ),
      z.array(
        z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ])
      ),
      z.array(
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        })
      ),
      z.array(
        z.object({
          buyer: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              material: z.object({
                carbonFactor: z.string(),
                createdAt: z.iso.datetime(),
                gwCode: z.string(),
                id: z.uuid(),
                name: z.string(),
                updatedAt: z.iso.datetime(),
                value: z.number(),
              }),
              updatedAt: z.iso.datetime(),
              weight: z.number(),
            })
          ),
          seller: z.object({
            activeOrganization: z.uuid(),
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            banReason: z.union([z.string(), z.null()]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            banned: z.boolean(),
            createdAt: z.iso.datetime(),
            email: z.string(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            phone: z.string(),
            roles: z.array(
              z.object({
                createdAt: z.iso.datetime(),
                description: z.union([z.string(), z.null()]),
                id: z.uuid(),
                name: z.string(),
                permissions: z.array(z.string()),
                updatedAt: z.iso.datetime(),
              })
            ),
            type: z.enum(['standard', 'collector', 'business', 'system']),
            updatedAt: z.iso.datetime(),
          }),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          buyer: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              material: z.object({
                carbonFactor: z.string(),
                createdAt: z.iso.datetime(),
                gwCode: z.string(),
                id: z.uuid(),
                name: z.string(),
                updatedAt: z.iso.datetime(),
                value: z.number(),
              }),
              updatedAt: z.iso.datetime(),
              value: z.optional(z.number()),
              weight: z.number(),
            })
          ),
          seller: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          updatedAt: z.iso.datetime(),
        })
      ),
    ])
  ),
  pageDetails: z.optional(
    z.union([
      z.object({
        count: z.optional(z.int().gte(0)),
        currentPage: z.optional(z.int().gte(1)),
        nextPage: z.optional(z.int().gte(2)),
        pages: z.optional(z.int().gte(0)),
        previousPage: z.optional(z.int().gte(1)),
      }),
      z.null(),
    ])
  ),
});

export const zTransaction = z.object({
  buyer: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      material: z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      updatedAt: z.iso.datetime(),
      value: z.optional(z.number()),
      weight: z.number(),
    })
  ),
  seller: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  updatedAt: z.iso.datetime(),
});

export const zTransactions = z.array(
  z.object({
    buyer: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    materials: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        material: z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        }),
        updatedAt: z.iso.datetime(),
        value: z.optional(z.number()),
        weight: z.number(),
      })
    ),
    seller: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    updatedAt: z.iso.datetime(),
  })
);

export const zUpdateAddress = z.object({
  city: z.optional(z.union([z.string(), z.null()])),
  country: z.optional(z.union([z.string(), z.null()])),
  lineOne: z.optional(z.union([z.string(), z.null()])),
  lineTwo: z.optional(z.union([z.string(), z.null()])),
  province: z.optional(z.union([z.string(), z.null()])),
  zipCode: z.optional(z.union([z.string(), z.null()])),
});

export const zUpdateBankDetail = z.object({
  accountHolder: z.optional(z.union([z.string(), z.null()])),
  accountNumber: z.optional(z.union([z.string(), z.null()])),
  bankName: z.optional(z.union([z.string(), z.null()])),
  branchName: z.optional(z.union([z.string(), z.null()])),
});

export const zUpdateCollection = z.object({
  buyerId: z.optional(z.union([z.uuid(), z.null()])),
  sellerId: z.optional(z.union([z.uuid(), z.null()])),
});

export const zUpdateCollectionMaterial = z.object({
  collectionId: z.optional(z.union([z.uuid(), z.null()])),
  materialId: z.optional(z.union([z.uuid(), z.null()])),
  value: z.optional(z.union([z.number(), z.null()])),
  weight: z.optional(z.union([z.number(), z.null()])),
});

export const zUpdateMaterial = z.object({
  carbonFactor: z.optional(z.number()),
  gwCode: z.optional(z.string()),
  name: z.optional(z.string()),
});

export const zUpdateOrganization = z.object({
  name: z.optional(z.union([z.string(), z.null()])),
  roles: z.optional(
    z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    )
  ),
  users: z.optional(
    z.array(
      z.object({
        activeOrganization: z.uuid(),
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        banReason: z.union([z.string(), z.null()]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        banned: z.boolean(),
        createdAt: z.iso.datetime(),
        email: z.string(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        phone: z.string(),
        roles: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            description: z.union([z.string(), z.null()]),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(z.string()),
            updatedAt: z.iso.datetime(),
          })
        ),
        type: z.enum(['standard', 'collector', 'business', 'system']),
        updatedAt: z.iso.datetime(),
      })
    )
  ),
});

export const zUpdateRole = z.object({
  description: z.optional(z.union([z.string(), z.null()])),
  name: z.optional(z.union([z.string(), z.null()])),
  permissions: z.optional(z.union([z.array(z.string()), z.null()])),
});

export const zUpdateTransaction = z.object({
  buyerId: z.optional(z.union([z.uuid(), z.null()])),
  sellerId: z.optional(z.union([z.uuid(), z.null()])),
});

export const zUpdateTransactionMaterial = z.object({
  materialId: z.optional(z.union([z.uuid(), z.null()])),
  transactionId: z.optional(z.union([z.uuid(), z.null()])),
  value: z.optional(z.union([z.number(), z.null()])),
  weight: z.optional(z.union([z.number(), z.null()])),
});

export const zUpdateUser = z.object({
  email: z.optional(z.union([z.string(), z.null()])),
  name: z.optional(z.union([z.string(), z.null()])),
  password: z.optional(z.union([z.string(), z.null()])),
  phone: z.optional(z.union([z.string(), z.null()])),
  roles: z.optional(
    z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    )
  ),
  type: z.optional(z.enum(['standard', 'collector', 'business', 'system'])),
});

export const zUser = z.object({
  activeOrganization: z.uuid(),
  address: z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ]),
  banReason: z.union([z.string(), z.null()]),
  bankDetails: z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ]),
  banned: z.boolean(),
  createdAt: z.iso.datetime(),
  email: z.string(),
  id: z.uuid(),
  mfaEnabled: z.boolean(),
  mfaVerified: z.boolean(),
  name: z.string(),
  phone: z.string(),
  roles: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      description: z.union([z.string(), z.null()]),
      id: z.uuid(),
      name: z.string(),
      permissions: z.array(z.string()),
      updatedAt: z.iso.datetime(),
    })
  ),
  type: z.enum(['standard', 'collector', 'business', 'system']),
  updatedAt: z.iso.datetime(),
});

export const zUsers = z.array(
  z.object({
    activeOrganization: z.uuid(),
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    banReason: z.union([z.string(), z.null()]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    banned: z.boolean(),
    createdAt: z.iso.datetime(),
    email: z.string(),
    id: z.uuid(),
    mfaEnabled: z.boolean(),
    mfaVerified: z.boolean(),
    name: z.string(),
    phone: z.string(),
    roles: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    ),
    type: z.enum(['standard', 'collector', 'business', 'system']),
    updatedAt: z.iso.datetime(),
  })
);

export const zGetApiAddressesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful addresses retrieval.
 */
export const zGetApiAddressesResponse = z.array(
  z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ])
);

export const zPostApiAddressesData = z.object({
  body: z.object({
    city: z.string(),
    country: z.string(),
    lineOne: z.string(),
    lineTwo: z.optional(z.union([z.string(), z.null()])),
    province: z.string(),
    zipCode: z.string(),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful address creation.
 */
export const zPostApiAddressesResponse = z.string();

export const zDeleteApiAddressesIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful address deletion.
 */
export const zDeleteApiAddressesIdResponse = z.string();

export const zGetApiAddressesIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful address retrieval.
 */
export const zGetApiAddressesIdResponse = z.union([
  z.object({
    city: z.string(),
    country: z.string(),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    lineOne: z.string(),
    lineTwo: z.union([z.string(), z.null()]),
    province: z.string(),
    updatedAt: z.iso.datetime(),
    zipCode: z.string(),
  }),
  z.null(),
]);

export const zPatchApiAddressesIdData = z.object({
  body: z.object({
    city: z.optional(z.union([z.string(), z.null()])),
    country: z.optional(z.union([z.string(), z.null()])),
    lineOne: z.optional(z.union([z.string(), z.null()])),
    lineTwo: z.optional(z.union([z.string(), z.null()])),
    province: z.optional(z.union([z.string(), z.null()])),
    zipCode: z.optional(z.union([z.string(), z.null()])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful address update.
 */
export const zPatchApiAddressesIdResponse = z.string();

export const zGetApiAuthenticationCheckData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful authentication check.
 */
export const zGetApiAuthenticationCheckResponse = z.object({
  item: z.optional(
    z.union([
      z.object({
        activeOrganization: z.uuid(),
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        banReason: z.union([z.string(), z.null()]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        banned: z.boolean(),
        createdAt: z.iso.datetime(),
        email: z.string(),
        id: z.uuid(),
        mfaEnabled: z.boolean(),
        mfaVerified: z.boolean(),
        name: z.string(),
        phone: z.string(),
        roles: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            description: z.union([z.string(), z.null()]),
            id: z.uuid(),
            name: z.string(),
            permissions: z.array(z.string()),
            updatedAt: z.iso.datetime(),
          })
        ),
        type: z.enum(['standard', 'collector', 'business', 'system']),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        address: z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ]),
        bankDetails: z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ]),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
      }),
      z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      z.object({
        buyer: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            material: z.object({
              carbonFactor: z.string(),
              createdAt: z.iso.datetime(),
              gwCode: z.string(),
              id: z.uuid(),
              name: z.string(),
              updatedAt: z.iso.datetime(),
              value: z.number(),
            }),
            updatedAt: z.iso.datetime(),
            weight: z.number(),
          })
        ),
        seller: z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        }),
        updatedAt: z.iso.datetime(),
      }),
      z.object({
        buyer: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        materials: z.array(
          z.object({
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            material: z.object({
              carbonFactor: z.string(),
              createdAt: z.iso.datetime(),
              gwCode: z.string(),
              id: z.uuid(),
              name: z.string(),
              updatedAt: z.iso.datetime(),
              value: z.number(),
            }),
            updatedAt: z.iso.datetime(),
            value: z.optional(z.number()),
            weight: z.number(),
          })
        ),
        seller: z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        }),
        updatedAt: z.iso.datetime(),
      }),
    ])
  ),
  items: z.optional(
    z.union([
      z.array(
        z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.union([
          z.object({
            city: z.string(),
            country: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            lineOne: z.string(),
            lineTwo: z.union([z.string(), z.null()]),
            province: z.string(),
            updatedAt: z.iso.datetime(),
            zipCode: z.string(),
          }),
          z.null(),
        ])
      ),
      z.array(
        z.union([
          z.object({
            accountHolder: z.string(),
            accountNumber: z.string(),
            bankName: z.string(),
            branchName: z.string(),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            updatedAt: z.iso.datetime(),
          }),
          z.null(),
        ])
      ),
      z.array(
        z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        })
      ),
      z.array(
        z.object({
          buyer: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              material: z.object({
                carbonFactor: z.string(),
                createdAt: z.iso.datetime(),
                gwCode: z.string(),
                id: z.uuid(),
                name: z.string(),
                updatedAt: z.iso.datetime(),
                value: z.number(),
              }),
              updatedAt: z.iso.datetime(),
              weight: z.number(),
            })
          ),
          seller: z.object({
            activeOrganization: z.uuid(),
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            banReason: z.union([z.string(), z.null()]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            banned: z.boolean(),
            createdAt: z.iso.datetime(),
            email: z.string(),
            id: z.uuid(),
            mfaEnabled: z.boolean(),
            mfaVerified: z.boolean(),
            name: z.string(),
            phone: z.string(),
            roles: z.array(
              z.object({
                createdAt: z.iso.datetime(),
                description: z.union([z.string(), z.null()]),
                id: z.uuid(),
                name: z.string(),
                permissions: z.array(z.string()),
                updatedAt: z.iso.datetime(),
              })
            ),
            type: z.enum(['standard', 'collector', 'business', 'system']),
            updatedAt: z.iso.datetime(),
          }),
          updatedAt: z.iso.datetime(),
        })
      ),
      z.array(
        z.object({
          buyer: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          materials: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              material: z.object({
                carbonFactor: z.string(),
                createdAt: z.iso.datetime(),
                gwCode: z.string(),
                id: z.uuid(),
                name: z.string(),
                updatedAt: z.iso.datetime(),
                value: z.number(),
              }),
              updatedAt: z.iso.datetime(),
              value: z.optional(z.number()),
              weight: z.number(),
            })
          ),
          seller: z.object({
            address: z.union([
              z.object({
                city: z.string(),
                country: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                lineOne: z.string(),
                lineTwo: z.union([z.string(), z.null()]),
                province: z.string(),
                updatedAt: z.iso.datetime(),
                zipCode: z.string(),
              }),
              z.null(),
            ]),
            bankDetails: z.union([
              z.object({
                accountHolder: z.string(),
                accountNumber: z.string(),
                bankName: z.string(),
                branchName: z.string(),
                createdAt: z.iso.datetime(),
                id: z.uuid(),
                updatedAt: z.iso.datetime(),
              }),
              z.null(),
            ]),
            createdAt: z.iso.datetime(),
            id: z.uuid(),
            name: z.string(),
            updatedAt: z.iso.datetime(),
          }),
          updatedAt: z.iso.datetime(),
        })
      ),
    ])
  ),
  pageDetails: z.optional(
    z.union([
      z.object({
        count: z.optional(z.int().gte(0)),
        currentPage: z.optional(z.int().gte(1)),
        nextPage: z.optional(z.int().gte(2)),
        pages: z.optional(z.int().gte(0)),
        previousPage: z.optional(z.int().gte(1)),
      }),
      z.null(),
    ])
  ),
});

export const zPostApiAuthenticationLoginData = z.object({
  body: z.object({
    emailOrPhone: z.email(),
    password: z.string().min(6).max(100),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiAuthenticationLogoutData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiAuthenticationMfaEnableData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiAuthenticationMfaVerifyData = z.object({
  body: z.object({
    code: z.optional(z.string()),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiBankDetailsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful bank details retrieval.
 */
export const zGetApiBankDetailsResponse = z.array(
  z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ])
);

export const zPostApiBankDetailsData = z.object({
  body: z.object({
    accountHolder: z.string(),
    accountNumber: z.string(),
    bankName: z.string(),
    branchName: z.string(),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful bank details creation.
 */
export const zPostApiBankDetailsResponse = z.string();

export const zDeleteApiBankDetailsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful bank details deletion.
 */
export const zDeleteApiBankDetailsIdResponse = z.string();

export const zGetApiBankDetailsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful bank details retrieval.
 */
export const zGetApiBankDetailsIdResponse = z.union([
  z.object({
    accountHolder: z.string(),
    accountNumber: z.string(),
    bankName: z.string(),
    branchName: z.string(),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    updatedAt: z.iso.datetime(),
  }),
  z.null(),
]);

export const zPatchApiBankDetailsIdData = z.object({
  body: z.object({
    accountHolder: z.optional(z.union([z.string(), z.null()])),
    accountNumber: z.optional(z.union([z.string(), z.null()])),
    bankName: z.optional(z.union([z.string(), z.null()])),
    branchName: z.optional(z.union([z.string(), z.null()])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful bank details update.
 */
export const zPatchApiBankDetailsIdResponse = z.string();

export const zGetApiCollectionsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful collections retrieval.
 */
export const zGetApiCollectionsResponse = z.array(
  z.object({
    buyer: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    materials: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        material: z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        }),
        updatedAt: z.iso.datetime(),
        weight: z.number(),
      })
    ),
    seller: z.object({
      activeOrganization: z.uuid(),
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      banReason: z.union([z.string(), z.null()]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      banned: z.boolean(),
      createdAt: z.iso.datetime(),
      email: z.string(),
      id: z.uuid(),
      mfaEnabled: z.boolean(),
      mfaVerified: z.boolean(),
      name: z.string(),
      phone: z.string(),
      roles: z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      ),
      type: z.enum(['standard', 'collector', 'business', 'system']),
      updatedAt: z.iso.datetime(),
    }),
    updatedAt: z.iso.datetime(),
  })
);

export const zPostApiCollectionsData = z.object({
  body: z.object({
    buyerId: z.uuid(),
    sellerId: z.uuid(),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful collection creation.
 */
export const zPostApiCollectionsResponse = z.string();

export const zDeleteApiCollectionsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful collection deletion.
 */
export const zDeleteApiCollectionsIdResponse = z.string();

export const zGetApiCollectionsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful collection retrieval.
 */
export const zGetApiCollectionsIdResponse = z.object({
  buyer: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      material: z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      updatedAt: z.iso.datetime(),
      weight: z.number(),
    })
  ),
  seller: z.object({
    activeOrganization: z.uuid(),
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    banReason: z.union([z.string(), z.null()]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    banned: z.boolean(),
    createdAt: z.iso.datetime(),
    email: z.string(),
    id: z.uuid(),
    mfaEnabled: z.boolean(),
    mfaVerified: z.boolean(),
    name: z.string(),
    phone: z.string(),
    roles: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    ),
    type: z.enum(['standard', 'collector', 'business', 'system']),
    updatedAt: z.iso.datetime(),
  }),
  updatedAt: z.iso.datetime(),
});

export const zPatchApiCollectionsIdData = z.object({
  body: z.object({
    buyerId: z.optional(z.union([z.uuid(), z.null()])),
    sellerId: z.optional(z.union([z.uuid(), z.null()])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful collection update.
 */
export const zPatchApiCollectionsIdResponse = z.string();

export const zGetApiMaterialsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful materials retrieval.
 */
export const zGetApiMaterialsResponse = z.array(
  z.object({
    carbonFactor: z.string(),
    createdAt: z.iso.datetime(),
    gwCode: z.string(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
    value: z.number(),
  })
);

export const zPostApiMaterialsData = z.object({
  body: z.object({
    carbonFactor: z.number(),
    gwCode: z.string(),
    name: z.string(),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful material creation.
 */
export const zPostApiMaterialsResponse = z.string();

export const zDeleteApiMaterialsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful material deletion.
 */
export const zDeleteApiMaterialsIdResponse = z.string();

export const zGetApiMaterialsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful material retrieval.
 */
export const zGetApiMaterialsIdResponse = z.object({
  carbonFactor: z.string(),
  createdAt: z.iso.datetime(),
  gwCode: z.string(),
  id: z.uuid(),
  name: z.string(),
  updatedAt: z.iso.datetime(),
  value: z.number(),
});

export const zPatchApiMaterialsIdData = z.object({
  body: z.object({
    carbonFactor: z.optional(z.number()),
    gwCode: z.optional(z.string()),
    name: z.optional(z.string()),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful material update.
 */
export const zPatchApiMaterialsIdResponse = z.string();

export const zGetApiOrganizationsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful organizations retrieval.
 */
export const zGetApiOrganizationsResponse = z.array(
  z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  })
);

export const zPostApiOrganizationsData = z.object({
  body: z.object({
    name: z.string(),
    roles: z.optional(
      z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      )
    ),
    users: z.optional(
      z.array(
        z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        })
      )
    ),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful organization creation.
 */
export const zPostApiOrganizationsResponse = z.string();

export const zDeleteApiOrganizationsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful organization deletion.
 */
export const zDeleteApiOrganizationsIdResponse = z.string();

export const zGetApiOrganizationsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful organization retrieval.
 */
export const zGetApiOrganizationsIdResponse = z.object({
  address: z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ]),
  bankDetails: z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ]),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  name: z.string(),
  updatedAt: z.iso.datetime(),
});

export const zPatchApiOrganizationsIdData = z.object({
  body: z.object({
    name: z.optional(z.union([z.string(), z.null()])),
    roles: z.optional(
      z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      )
    ),
    users: z.optional(
      z.array(
        z.object({
          activeOrganization: z.uuid(),
          address: z.union([
            z.object({
              city: z.string(),
              country: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              lineOne: z.string(),
              lineTwo: z.union([z.string(), z.null()]),
              province: z.string(),
              updatedAt: z.iso.datetime(),
              zipCode: z.string(),
            }),
            z.null(),
          ]),
          banReason: z.union([z.string(), z.null()]),
          bankDetails: z.union([
            z.object({
              accountHolder: z.string(),
              accountNumber: z.string(),
              bankName: z.string(),
              branchName: z.string(),
              createdAt: z.iso.datetime(),
              id: z.uuid(),
              updatedAt: z.iso.datetime(),
            }),
            z.null(),
          ]),
          banned: z.boolean(),
          createdAt: z.iso.datetime(),
          email: z.string(),
          id: z.uuid(),
          mfaEnabled: z.boolean(),
          mfaVerified: z.boolean(),
          name: z.string(),
          phone: z.string(),
          roles: z.array(
            z.object({
              createdAt: z.iso.datetime(),
              description: z.union([z.string(), z.null()]),
              id: z.uuid(),
              name: z.string(),
              permissions: z.array(z.string()),
              updatedAt: z.iso.datetime(),
            })
          ),
          type: z.enum(['standard', 'collector', 'business', 'system']),
          updatedAt: z.iso.datetime(),
        })
      )
    ),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful organization update.
 */
export const zPatchApiOrganizationsIdResponse = z.string();

export const zGetApiRolesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful roles retrieval.
 */
export const zGetApiRolesResponse = z.array(
  z.object({
    createdAt: z.iso.datetime(),
    description: z.union([z.string(), z.null()]),
    id: z.uuid(),
    name: z.string(),
    permissions: z.array(z.string()),
    updatedAt: z.iso.datetime(),
  })
);

export const zPostApiRolesData = z.object({
  body: z.object({
    description: z.optional(z.union([z.string(), z.null()])),
    name: z.string(),
    permissions: z.array(z.string()),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful role creation.
 */
export const zPostApiRolesResponse = z.string();

export const zDeleteApiRolesIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful role deletion.
 */
export const zDeleteApiRolesIdResponse = z.string();

export const zGetApiRolesIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful role retrieval.
 */
export const zGetApiRolesIdResponse = z.object({
  createdAt: z.iso.datetime(),
  description: z.union([z.string(), z.null()]),
  id: z.uuid(),
  name: z.string(),
  permissions: z.array(z.string()),
  updatedAt: z.iso.datetime(),
});

export const zPatchApiRolesIdData = z.object({
  body: z.object({
    description: z.optional(z.union([z.string(), z.null()])),
    name: z.optional(z.union([z.string(), z.null()])),
    permissions: z.optional(z.union([z.array(z.string()), z.null()])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful role update.
 */
export const zPatchApiRolesIdResponse = z.string();

export const zGetApiTransactionsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
  }),
});

/**
 * Successful transactions retrieval.
 */
export const zGetApiTransactionsResponse = z.array(
  z.object({
    buyer: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    materials: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        material: z.object({
          carbonFactor: z.string(),
          createdAt: z.iso.datetime(),
          gwCode: z.string(),
          id: z.uuid(),
          name: z.string(),
          updatedAt: z.iso.datetime(),
          value: z.number(),
        }),
        updatedAt: z.iso.datetime(),
        value: z.optional(z.number()),
        weight: z.number(),
      })
    ),
    seller: z.object({
      address: z.union([
        z.object({
          city: z.string(),
          country: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          lineOne: z.string(),
          lineTwo: z.union([z.string(), z.null()]),
          province: z.string(),
          updatedAt: z.iso.datetime(),
          zipCode: z.string(),
        }),
        z.null(),
      ]),
      bankDetails: z.union([
        z.object({
          accountHolder: z.string(),
          accountNumber: z.string(),
          bankName: z.string(),
          branchName: z.string(),
          createdAt: z.iso.datetime(),
          id: z.uuid(),
          updatedAt: z.iso.datetime(),
        }),
        z.null(),
      ]),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      name: z.string(),
      updatedAt: z.iso.datetime(),
    }),
    updatedAt: z.iso.datetime(),
  })
);

export const zPostApiTransactionsData = z.object({
  body: z.object({
    buyerId: z.uuid(),
    sellerId: z.uuid(),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful transaction creation.
 */
export const zPostApiTransactionsResponse = z.string();

export const zDeleteApiTransactionsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful transaction deletion.
 */
export const zDeleteApiTransactionsIdResponse = z.string();

export const zGetApiTransactionsIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful transaction retrieval.
 */
export const zGetApiTransactionsIdResponse = z.object({
  buyer: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  createdAt: z.iso.datetime(),
  id: z.uuid(),
  materials: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      material: z.object({
        carbonFactor: z.string(),
        createdAt: z.iso.datetime(),
        gwCode: z.string(),
        id: z.uuid(),
        name: z.string(),
        updatedAt: z.iso.datetime(),
        value: z.number(),
      }),
      updatedAt: z.iso.datetime(),
      value: z.optional(z.number()),
      weight: z.number(),
    })
  ),
  seller: z.object({
    address: z.union([
      z.object({
        city: z.string(),
        country: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        lineOne: z.string(),
        lineTwo: z.union([z.string(), z.null()]),
        province: z.string(),
        updatedAt: z.iso.datetime(),
        zipCode: z.string(),
      }),
      z.null(),
    ]),
    bankDetails: z.union([
      z.object({
        accountHolder: z.string(),
        accountNumber: z.string(),
        bankName: z.string(),
        branchName: z.string(),
        createdAt: z.iso.datetime(),
        id: z.uuid(),
        updatedAt: z.iso.datetime(),
      }),
      z.null(),
    ]),
    createdAt: z.iso.datetime(),
    id: z.uuid(),
    name: z.string(),
    updatedAt: z.iso.datetime(),
  }),
  updatedAt: z.iso.datetime(),
});

export const zPatchApiTransactionsIdData = z.object({
  body: z.object({
    buyerId: z.optional(z.union([z.uuid(), z.null()])),
    sellerId: z.optional(z.union([z.uuid(), z.null()])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful transaction update.
 */
export const zPatchApiTransactionsIdResponse = z.string();

export const zGetApiUsersData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    page: z.coerce.bigint().gte(BigInt(1)).default(BigInt(1)),
    limit: z.coerce.bigint().gte(BigInt(10)).default(BigInt(10)),
    search: z.string(),
    type: z.string(),
  }),
});

/**
 * Successful users retrieval.
 */
export const zGetApiUsersResponse = z.object({
  activeOrganization: z.uuid(),
  address: z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ]),
  banReason: z.union([z.string(), z.null()]),
  bankDetails: z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ]),
  banned: z.boolean(),
  createdAt: z.iso.datetime(),
  email: z.string(),
  id: z.uuid(),
  mfaEnabled: z.boolean(),
  mfaVerified: z.boolean(),
  name: z.string(),
  phone: z.string(),
  roles: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      description: z.union([z.string(), z.null()]),
      id: z.uuid(),
      name: z.string(),
      permissions: z.array(z.string()),
      updatedAt: z.iso.datetime(),
    })
  ),
  type: z.enum(['standard', 'collector', 'business', 'system']),
  updatedAt: z.iso.datetime(),
});

export const zPostApiUsersData = z.object({
  body: z.object({
    email: z.string(),
    name: z.string(),
    password: z.string(),
    phone: z.string(),
    roles: z.array(
      z.object({
        createdAt: z.iso.datetime(),
        description: z.union([z.string(), z.null()]),
        id: z.uuid(),
        name: z.string(),
        permissions: z.array(z.string()),
        updatedAt: z.iso.datetime(),
      })
    ),
    type: z.enum(['standard', 'collector', 'business', 'system']),
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * Successful user creation.
 */
export const zPostApiUsersResponse = z.string();

export const zDeleteApiUsersIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful user deletion.
 */
export const zDeleteApiUsersIdResponse = z.string();

export const zGetApiUsersIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful user retrieval.
 */
export const zGetApiUsersIdResponse = z.object({
  activeOrganization: z.uuid(),
  address: z.union([
    z.object({
      city: z.string(),
      country: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      lineOne: z.string(),
      lineTwo: z.union([z.string(), z.null()]),
      province: z.string(),
      updatedAt: z.iso.datetime(),
      zipCode: z.string(),
    }),
    z.null(),
  ]),
  banReason: z.union([z.string(), z.null()]),
  bankDetails: z.union([
    z.object({
      accountHolder: z.string(),
      accountNumber: z.string(),
      bankName: z.string(),
      branchName: z.string(),
      createdAt: z.iso.datetime(),
      id: z.uuid(),
      updatedAt: z.iso.datetime(),
    }),
    z.null(),
  ]),
  banned: z.boolean(),
  createdAt: z.iso.datetime(),
  email: z.string(),
  id: z.uuid(),
  mfaEnabled: z.boolean(),
  mfaVerified: z.boolean(),
  name: z.string(),
  phone: z.string(),
  roles: z.array(
    z.object({
      createdAt: z.iso.datetime(),
      description: z.union([z.string(), z.null()]),
      id: z.uuid(),
      name: z.string(),
      permissions: z.array(z.string()),
      updatedAt: z.iso.datetime(),
    })
  ),
  type: z.enum(['standard', 'collector', 'business', 'system']),
  updatedAt: z.iso.datetime(),
});

export const zPatchApiUsersIdData = z.object({
  body: z.object({
    email: z.optional(z.union([z.string(), z.null()])),
    name: z.optional(z.union([z.string(), z.null()])),
    password: z.optional(z.union([z.string(), z.null()])),
    phone: z.optional(z.union([z.string(), z.null()])),
    roles: z.optional(
      z.array(
        z.object({
          createdAt: z.iso.datetime(),
          description: z.union([z.string(), z.null()]),
          id: z.uuid(),
          name: z.string(),
          permissions: z.array(z.string()),
          updatedAt: z.iso.datetime(),
        })
      )
    ),
    type: z.optional(z.enum(['standard', 'collector', 'business', 'system'])),
  }),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * Successful user update.
 */
export const zPatchApiUsersIdResponse = z.string();
